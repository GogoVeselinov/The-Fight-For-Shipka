[gd_scene load_steps=19 format=3 uid="uid://j06ed3mkvnqy"]

[ext_resource type="PackedScene" uid="uid://b18i2oluo7rvl" path="res://scenes/player.tscn" id="1_y6aoc"]
[ext_resource type="Material" uid="uid://c217ps3757wlm" path="res://skybox.tres" id="3_1gn02"]
[ext_resource type="Terrain3DStorage" uid="uid://lalq1xnmbjdl" path="res://terrain/terrain_storage.res" id="3_g5m1t"]
[ext_resource type="Terrain3DAssets" uid="uid://dal3jhw6241qg" path="res://terrain/terrain_assets.tres" id="5_l6jr1"]
[ext_resource type="PackedScene" uid="uid://ddovo8pym3mts" path="res://scenes/turk.tscn" id="6_x66dh"]
[ext_resource type="PackedScene" uid="uid://b54n14o8wc77y" path="res://models/misc/tent.glb" id="7_20ygi"]
[ext_resource type="PackedScene" uid="uid://dy0r21gsavb5n" path="res://scenes/spawner.tscn" id="8_g6n7e"]
[ext_resource type="Script" path="res://scripts/enemySpawner.gd" id="8_loy3m"]

[sub_resource type="Sky" id="Sky_e10e3"]
sky_material = ExtResource("3_1gn02")

[sub_resource type="Environment" id="Environment_3d6es"]
background_mode = 2
sky = SubResource("Sky_e10e3")
ambient_light_color = Color(0.572988, 0.572988, 0.572988, 1)

[sub_resource type="WorldBoundaryShape3D" id="WorldBoundaryShape3D_fc7yi"]

[sub_resource type="BoxMesh" id="BoxMesh_qfr0p"]
size = Vector3(60, 2, 60)

[sub_resource type="NavigationMesh" id="NavigationMesh_3mdr1"]
vertices = PackedVector3Array(303.053, 98.8488, 314.314, 302.302, 98.5985, 314.314, 302.052, 98.8488, 315.315, 299.049, 98.5985, 317.317, 298.298, 98.5985, 317.317, 298.048, 98.5985, 318.318, 297.297, 98.5985, 318.318, 297.047, 98.5985, 319.319, 296.296, 98.5985, 319.319, 296.046, 98.5985, 320.32, 295.295, 98.5985, 320.32, 295.045, 98.5985, 321.321, 294.294, 98.5985, 321.321, 294.044, 98.5985, 322.322, 293.293, 98.5985, 322.322, 293.043, 98.5985, 323.323, 304.304, 98.8488, 313.063, 303.303, 98.5985, 313.313, 316.066, 99.5995, 312.312, 308.809, 98.8488, 312.812, 300.3, 98.5985, 316.066, 299.299, 98.5985, 316.316, 300.3, 98.5985, 315.315, 355.605, 110.11, 327.327, 354.855, 109.86, 326.326, 353.603, 109.61, 326.326, 295.295, 99.5995, 353.603, 295.295, 99.8498, 354.855, 296.296, 100.1, 355.605, 296.296, 100.1, 356.857, 297.297, 100.35, 357.607, 297.297, 100.35, 358.859, 298.298, 100.601, 359.609, 298.298, 100.601, 360.861, 299.299, 100.851, 361.611, 299.299, 101.101, 362.863, 300.3, 101.101, 363.613, 301.301, 101.602, 366.616, 301.301, 101.602, 367.868, 302.302, 101.852, 368.618, 307.307, 102.603, 375.625, 307.307, 102.853, 376.877, 308.308, 102.853, 377.627, 308.308, 102.853, 378.879, 309.309, 103.103, 379.629, 309.309, 103.103, 380.881, 310.31, 103.103, 381.631, 310.31, 103.103, 382.883, 311.311, 103.103, 383.633, 311.311, 103.353, 384.885, 312.312, 103.353, 385.635, 292.292, 98.5985, 323.323, 292.292, 98.5985, 326.076, 352.853, 109.359, 325.325, 350.6, 108.609, 325.325, 349.85, 108.358, 324.324, 347.597, 107.608, 324.324, 341.591, 105.856, 320.32, 340.841, 105.856, 319.319, 338.588, 105.105, 319.319, 332.582, 103.103, 315.315, 331.832, 102.853, 314.314, 329.579, 102.352, 314.314, 300.3, 101.351, 365.866, 321.071, 103.854, 393.393, 321.822, 103.854, 394.394, 324.074, 104.104, 394.394, 345.846, 107.357, 322.322, 344.594, 106.857, 322.322, 342.843, 106.356, 320.32, 336.837, 104.605, 317.317, 335.585, 104.104, 317.317, 333.834, 103.604, 315.315, 302.302, 101.852, 369.87, 304.304, 102.102, 371.621, 318.068, 103.604, 391.391, 319.82, 103.604, 393.393, 294.294, 99.3493, 349.599, 294.294, 99.5995, 352.853, 304.304, 102.352, 372.873, 327.828, 101.602, 312.312, 324.574, 100.851, 312.312, 338.588, 108.108, 394.394, 329.83, 105.355, 393.143, 334.334, 106.607, 394.394, 292.292, 98.5985, 335.585, 292.292, 98.5985, 341.842, 293.293, 98.8488, 342.592, 293.293, 99.099, 348.849, 312.312, 103.353, 386.887, 316.817, 103.353, 391.391, 307.808, 98.8488, 314.064, 304.805, 98.8488, 318.819, 323.824, 100.851, 311.311, 316.316, 99.5995, 311.311, 314.564, 101.852, 354.354, 332.332, 104.104, 342.592, 341.341, 105.856, 336.837, 340.09, 105.355, 330.831, 327.828, 103.103, 340.841, 314.064, 101.602, 352.352, 291.291, 98.5985, 326.326, 291.291, 98.5985, 334.835, 308.558, 102.853, 376.126, 312.312, 103.353, 382.883, 320.32, 100.1, 313.563, 330.08, 102.352, 316.817, 304.304, 98.5985, 312.312, 324.825, 104.354, 395.395, 338.338, 108.108, 395.395, 334.334, 106.607, 395.395, 357.357, 114.615, 394.394, 357.357, 110.611, 327.327, 351.601, 112.112, 394.394, 357.357, 112.112, 383.633, 357.357, 110.861, 370.62, 357.357, 110.11, 353.353, 357.357, 110.11, 338.088, 349.349, 109.359, 378.378, 320.821, 103.854, 376.877, 337.337, 107.357, 387.387, 344.845, 109.359, 390.39, 331.331, 105.606, 379.88, 331.331, 105.355, 367.868, 341.842, 106.857, 361.862, 316.316, 102.603, 358.859, 323.824, 103.604, 361.862, 311.812, 102.102, 363.363, 340.34, 107.107, 373.874, 347.848, 107.858, 343.844, 320.821, 103.854, 370.871, 311.812, 102.853, 375.375, 313.313, 103.353, 379.88, 301.301, 99.099, 334.835, 313.313, 100.1, 328.829, 298.298, 99.5995, 349.85, 337.337, 104.855, 327.327, 328.328, 102.603, 328.829, 423.423, 124.625, 376.126, 423.423, 124.374, 375.375, 422.672, 124.374, 375.375, 418.418, 122.623, 370.12, 418.418, 122.372, 369.369, 417.667, 122.372, 369.369, 414.414, 121.371, 364.114, 414.414, 121.371, 363.363, 413.663, 121.371, 363.363, 394.394, 118.619, 345.095, 394.394, 118.619, 344.344, 393.643, 118.368, 344.344, 424.424, 125.876, 378.128, 424.424, 125.125, 376.877, 419.419, 123.123, 372.122, 419.419, 122.623, 370.871, 416.416, 122.122, 368.118, 416.416, 121.872, 366.867, 415.415, 121.622, 366.116, 415.415, 121.622, 364.865, 382.632, 117.117, 335.335, 381.882, 117.117, 334.334, 380.63, 116.867, 334.334, 373.623, 115.115, 332.332, 372.873, 115.115, 331.331, 371.621, 114.615, 331.331, 370.871, 114.615, 330.33, 369.619, 114.114, 330.33, 368.869, 114.114, 329.329, 367.617, 113.614, 329.329, 385.135, 123.373, 394.394, 385.886, 123.874, 395.395, 388.138, 124.374, 395.395, 379.88, 116.867, 333.333, 377.627, 116.116, 333.333, 366.867, 113.614, 328.328, 364.614, 112.863, 328.328, 397.147, 126.376, 397.397, 397.898, 126.877, 398.398, 400.901, 127.377, 398.398, 418.668, 129.379, 388.638, 402.402, 126.627, 395.145, 405.906, 127.628, 395.645, 425.425, 128.128, 381.882, 425.425, 126.376, 378.879, 424.174, 128.629, 383.133, 359.109, 115.115, 394.394, 359.86, 115.866, 395.395, 363.113, 117.117, 395.395, 388.889, 125.125, 396.396, 392.142, 125.626, 396.396, 376.877, 116.116, 332.332, 419.169, 125.375, 378.879, 416.917, 122.873, 372.622, 417.417, 124.374, 376.877, 386.636, 117.618, 338.338, 383.884, 117.367, 335.335, 373.623, 120.871, 395.395, 383.633, 123.123, 394.394, 374.875, 120.871, 394.394, 392.893, 126.126, 397.397, 402.652, 125.626, 391.391, 389.89, 124.625, 394.895, 394.394, 125.125, 394.895, 363.864, 112.613, 327.327, 387.888, 117.868, 338.338, 397.647, 119.119, 348.348, 395.395, 124.374, 392.392, 404.154, 125.876, 391.141, 386.386, 117.117, 361.611, 377.878, 116.116, 372.122, 365.365, 115.115, 386.887, 386.887, 118.118, 370.871, 382.382, 119.119, 382.883, 400.4, 120.871, 370.871, 398.899, 119.369, 360.36, 410.911, 125.876, 384.384, 404.905, 123.123, 379.88, 410.911, 123.624, 376.877, 376.376, 118.118, 384.384, 410.911, 122.372, 372.372, 394.394, 121.622, 381.381, 377.878, 119.119, 387.387, 371.872, 117.618, 387.387, 368.869, 118.619, 393.393, 370.37, 117.868, 390.39, 400.4, 120.871, 372.372, 413.914, 122.873, 372.372, 363.864, 117.868, 396.396, 373.373, 121.121, 396.396, 383.383, 123.373, 395.395, 398.899, 119.369, 348.348, 379.379, 115.365, 346.847, 376.376, 114.865, 360.36, 362.863, 113.363, 381.381, 367.367, 112.863, 342.342, 370.37, 115.115, 376.877, 358.358, 113.363, 388.889, 364.364, 112.112, 355.856, 368.869, 114.114, 373.874, 365.866, 112.613, 364.865, 427.427, 141.141, 424.674, 427.427, 141.141, 425.425, 428.178, 141.391, 425.425, 450.45, 141.141, 403.153, 450.45, 140.891, 402.402, 449.699, 140.891, 402.402, 445.445, 138.639, 398.148, 445.445, 138.388, 397.397, 444.694, 138.388, 397.397, 440.44, 136.136, 393.143, 440.44, 135.886, 392.392, 439.689, 135.636, 392.392, 448.448, 140.14, 401.151, 448.448, 139.64, 399.9, 447.948, 139.389, 399.399, 446.696, 139.389, 399.399, 428.929, 141.892, 426.426, 429.93, 142.142, 426.426, 433.683, 132.883, 387.387, 432.933, 132.132, 386.386, 431.681, 131.882, 386.386, 428.678, 130.38, 384.384, 427.928, 129.63, 383.383, 426.676, 129.379, 383.383, 434.684, 133.133, 388.388, 452.452, 142.392, 405.906, 452.452, 142.142, 404.905, 429.93, 130.631, 384.384, 434.935, 132.883, 387.387, 420.17, 137.137, 417.417, 449.199, 143.143, 411.661, 423.423, 130.881, 389.139, 430.931, 141.892, 425.425, 415.665, 134.885, 412.913, 416.166, 133.633, 408.658, 402.402, 127.878, 399.649, 402.402, 128.128, 400.4, 403.153, 128.378, 400.4, 404.404, 128.128, 399.399, 409.409, 131.632, 406.656, 409.409, 131.882, 407.407, 410.16, 131.882, 407.407, 410.16, 131.131, 405.405, 413.413, 133.633, 410.66, 413.413, 133.884, 411.411, 414.164, 134.134, 411.411, 415.415, 132.382, 404.154, 407.908, 129.379, 399.399, 454.704, 143.644, 408.408, 472.472, 152.402, 426.176, 472.472, 152.152, 424.925, 468.468, 150.15, 421.171, 455.956, 143.894, 408.408, 449.199, 143.894, 414.664, 461.711, 146.646, 414.414, 454.704, 145.395, 414.414, 468.468, 149.65, 419.92, 462.963, 146.897, 414.414, 447.697, 149.149, 437.187, 473.974, 153.153, 427.427, 457.457, 146.396, 415.916, 431.431, 142.893, 427.928, 436.186, 142.893, 424.424, 435.435, 145.145, 432.682, 435.435, 145.395, 433.433, 436.186, 145.646, 433.433, 441.441, 147.648, 436.686, 441.441, 147.898, 437.437, 442.192, 147.898, 437.437, 446.446, 149.9, 440.69, 446.446, 150.15, 441.441, 447.697, 150.4, 441.942, 442.943, 148.398, 438.438, 444.194, 148.649, 438.438, 436.937, 146.146, 434.434, 439.189, 146.396, 434.434, 431.431, 143.143, 428.929, 448.448, 150.901, 442.692, 448.448, 151.151, 443.443, 449.199, 151.401, 443.443, 475.475, 153.904, 428.929, 474.975, 153.403, 427.427, 454.955, 154.404, 449.449, 456.206, 154.655, 449.449, 461.962, 157.658, 455.455, 463.213, 157.658, 455.455, 469.219, 154.655, 438.188, 458.959, 152.903, 441.441, 464.714, 158.408, 456.957, 472.472, 162.412, 463.713, 472.472, 162.663, 464.464, 473.223, 162.663, 464.464, 475.225, 161.161, 457.207, 467.217, 159.91, 459.459, 467.968, 160.41, 460.46, 469.219, 160.661, 460.46, 474.474, 163.664, 465.966, 474.474, 162.913, 464.464, 476.726, 154.404, 430.43, 467.467, 158.909, 456.456, 475.475, 154.905, 432.432, 483.483, 157.157, 434.184, 483.483, 156.907, 433.433, 482.732, 156.657, 433.433, 481.982, 156.156, 432.432, 480.73, 155.906, 432.432, 479.98, 155.405, 431.431, 478.728, 155.155, 431.431, 477.978, 154.655, 430.43, 490.49, 160.661, 440.941, 490.49, 160.41, 439.94, 486.987, 158.408, 436.436, 485.735, 158.158, 436.436, 479.98, 156.406, 433.934, 484.484, 159.91, 442.943, 484.484, 168.418, 475.725, 484.484, 168.669, 476.476, 485.235, 168.919, 476.476, 493.243, 169.67, 473.223, 488.238, 168.669, 474.474, 486.486, 168.669, 475.725, 474.474, 163.914, 466.967, 476.977, 165.165, 469.469, 478.228, 165.415, 469.469, 477.727, 164.665, 467.968, 475.225, 163.664, 465.465, 495.745, 163.413, 445.445, 492.993, 161.662, 442.442, 491.741, 161.411, 442.442, 493.493, 168.418, 468.718, 477.227, 160.911, 455.205, 481.231, 162.913, 457.958, 487.487, 170.17, 478.979, 489.239, 169.67, 476.977, 504.504, 167.918, 453.453, 497.998, 164.164, 446.446, 496.746, 163.914, 446.446, 515.765, 173.423, 463.463, 505.755, 168.418, 453.453, 507.757, 171.672, 466.716, 506.756, 171.421, 465.465, 499.499, 169.169, 465.465, 536.286, 181.932, 485.235, 536.286, 181.682, 484.484, 535.535, 181.682, 484.484, 530.28, 179.93, 476.226, 530.28, 179.68, 475.475, 529.529, 179.429, 475.475, 525.275, 177.427, 470.22, 525.275, 177.177, 469.469, 524.524, 176.927, 469.469, 540.29, 183.183, 494.244, 540.29, 182.683, 492.993, 539.289, 182.683, 492.242, 538.288, 182.182, 489.239, 538.288, 182.182, 487.988, 537.287, 181.932, 487.237, 537.287, 181.932, 485.986, 532.282, 180.931, 480.23, 532.282, 180.931, 478.979, 531.281, 180.43, 478.228, 531.281, 180.18, 476.977, 486.486, 180.18, 496.246, 485.485, 180.43, 496.496, 485.485, 181.932, 498.999, 486.486, 182.182, 500, 539.289, 182.182, 489.99, 523.773, 176.677, 468.468, 521.521, 175.926, 468.468, 534.284, 181.682, 483.233, 534.284, 181.431, 481.982, 487.487, 173.173, 484.234, 486.486, 173.423, 484.484, 541.291, 184.184, 498.248, 541.291, 183.183, 494.995, 528.278, 178.929, 474.224, 527.527, 178.929, 474.724, 528.278, 178.679, 472.973, 486.987, 175.926, 488.488, 536.286, 181.932, 487.737, 542.042, 184.434, 498.999, 530.78, 183.684, 498.498, 520.02, 182.182, 498.748, 506.006, 180.931, 499.249, 495.245, 180.931, 499.499, 489.99, 181.431, 499.749, 504.254, 180.931, 499.499, 518.768, 182.182, 499.249, 535.035, 184.184, 498.999, 516.766, 173.674, 463.463, 527.277, 178.929, 474.975, 490.49, 170.42, 477.978, 490.49, 172.172, 481.982, 515.765, 178.929, 487.988, 496.246, 176.677, 489.489, 500.75, 173.674, 480.48, 532.282, 181.932, 487.988, 530.78, 182.182, 492.492, 502.252, 177.177, 489.489, 520.27, 178.428, 481.982, 524.774, 180.43, 486.236, 517.267, 176.927, 477.477, 491.741, 178.679, 493.743, 490.49, 176.176, 489.489, 488.989, 180.18, 496.997, 517.517, 175.676, 472.973, 494.494, 196.697, 576.576, 494.494, 196.697, 577.327, 495.245, 196.446, 577.327, 478.228, 193.193, 520.27, 477.477, 193.443, 520.27, 477.227, 193.694, 521.271, 476.476, 194.194, 521.271, 476.226, 194.194, 522.272, 481.481, 190.691, 516.016, 480.48, 191.191, 516.266, 480.23, 191.441, 517.267, 479.479, 192.192, 519.019, 478.478, 192.693, 519.269, 475.475, 194.194, 524.023, 474.474, 194.444, 524.274, 474.224, 194.194, 525.275, 473.473, 193.944, 527.027, 472.472, 194.444, 527.277, 472.222, 194.194, 528.278, 489.489, 198.448, 575.575, 490.49, 197.948, 575.325, 490.74, 197.447, 574.324, 479.479, 191.942, 517.267, 475.475, 194.695, 522.272, 473.473, 194.444, 525.275, 485.485, 185.936, 507.007, 484.484, 186.436, 507.257, 484.484, 187.187, 509.009, 483.483, 188.689, 512.012, 482.482, 189.189, 512.262, 482.482, 189.69, 514.014, 481.481, 190.19, 514.264, 473.473, 195.445, 550.55, 473.473, 195.696, 551.801, 474.474, 195.445, 552.552, 474.474, 195.696, 553.803, 475.475, 195.445, 554.554, 478.478, 196.446, 560.56, 478.478, 196.947, 561.811, 479.479, 196.947, 562.562, 499.249, 195.445, 580.33, 500, 195.445, 581.331, 501.001, 195.195, 581.331, 510.01, 195.195, 588.338, 510.76, 195.445, 589.339, 512.012, 195.195, 589.339, 470.47, 194.695, 530.03, 469.469, 195.195, 530.28, 469.219, 195.195, 532.032, 470.47, 194.945, 528.278, 486.987, 199.449, 576.326, 489.489, 198.699, 576.326, 483.483, 187.437, 509.259, 470.47, 195.445, 542.542, 470.47, 195.696, 544.794, 471.471, 195.445, 545.545, 477.477, 195.696, 557.557, 477.477, 196.446, 559.809, 543.293, 186.186, 505.005, 543.293, 185.435, 502.752, 542.292, 185.185, 502.002, 472.472, 195.195, 537.287, 474.724, 193.694, 532.032, 477.477, 193.443, 525.525, 479.229, 192.693, 521.521, 477.727, 193.443, 523.273, 474.724, 193.694, 531.531, 472.472, 195.195, 537.036, 475.475, 195.696, 555.805, 507.007, 195.195, 586.336, 508.758, 195.445, 588.338, 545.295, 190.691, 518.768, 545.295, 189.69, 515.765, 544.294, 189.439, 515.015, 523.523, 192.442, 541.041, 528.778, 191.441, 535.785, 540.29, 191.692, 524.274, 540.79, 190.691, 519.769, 537.036, 191.191, 524.274, 529.029, 191.191, 534.284, 525.525, 191.692, 538.788, 479.479, 198.198, 572.822, 483.233, 199.199, 574.574, 484.985, 198.699, 573.573, 476.726, 193.944, 522.272, 497.998, 195.696, 580.33, 518.768, 190.941, 536.786, 512.512, 190.44, 531.281, 496.496, 187.437, 517.017, 494.995, 188.689, 520.52, 512.012, 190.691, 532.782, 517.017, 190.941, 536.536, 490.24, 187.688, 514.764, 471.471, 195.696, 548.798, 492.242, 197.197, 574.324, 486.236, 196.947, 567.567, 481.231, 196.446, 562.062, 486.486, 182.933, 501.001, 485.485, 183.183, 501.251, 521.271, 191.441, 538.538, 511.511, 189.94, 528.278, 505.505, 188.438, 521.771, 488.738, 183.684, 503.753, 472.472, 193.944, 531.281, 471.471, 195.195, 537.036, 469.469, 195.445, 541.791, 505.755, 195.195, 586.336, 497.747, 195.445, 578.828, 472.722, 195.195, 537.287, 473.723, 194.194, 534.534, 475.475, 193.443, 530.53, 477.727, 193.443, 525.025, 479.479, 192.693, 521.021, 544.294, 186.436, 505.755, 472.722, 195.195, 537.287, 474.975, 193.694, 532.032, 477.727, 193.443, 525.275, 479.479, 192.693, 521.521, 513.513, 195.445, 590.84, 522.022, 194.194, 547.297, 520.27, 195.195, 555.055, 521.021, 195.195, 554.054, 522.272, 194.194, 547.547, 526.776, 190.941, 534.284, 532.032, 190.44, 523.523, 534.534, 189.69, 518.268, 523.273, 188.939, 520.77, 496.246, 181.682, 501.501, 512.762, 184.935, 510.51, 514.264, 188.188, 520.77, 523.273, 190.19, 531.281, 521.771, 189.94, 526.776, 524.774, 189.69, 525.275, 507.007, 182.432, 502.752, 502.502, 186.436, 515.015, 505.255, 183.684, 507.507, 521.771, 186.436, 512.012, 500.25, 195.195, 580.58, 503.753, 191.942, 541.791, 494.995, 195.195, 549.299, 499.499, 195.445, 568.818, 484.484, 192.192, 526.776, 487.487, 193.694, 541.791, 491.992, 191.692, 529.779, 482.983, 195.195, 546.296, 490.24, 195.445, 559.809, 512.762, 194.444, 549.299, 502.252, 193.694, 547.797, 502.502, 195.195, 552.302, 502.252, 190.691, 531.281, 493.243, 196.446, 573.323, 487.487, 190.19, 520.77, 479.98, 195.195, 553.803, 514.264, 191.441, 537.287, 517.267, 191.441, 538.788, 499.499, 193.443, 546.296, 491.992, 193.944, 543.293, 494.744, 192.693, 540.29, 479.729, 192.693, 525.275, 485.986, 191.942, 528.278, 481.481, 192.943, 529.779, 475.475, 194.194, 535.785, 473.974, 195.195, 538.788, 496.496, 189.69, 523.773, 504.004, 189.94, 528.278, 485.986, 191.942, 526.776, 496.496, 195.696, 565.815, 497.998, 195.195, 561.311, 484.484, 198.198, 571.821, 482.983, 197.197, 568.818, 487.487, 197.698, 571.821, 538.288, 189.189, 515.015, 522.022, 195.195, 594.344, 522.772, 195.445, 595.345, 524.023, 195.445, 595.345, 541.541, 195.195, 594.344, 543.293, 195.445, 594.344, 543.543, 195.195, 593.343, 545.295, 195.445, 593.343, 545.545, 195.195, 592.342, 547.297, 195.445, 592.342, 547.547, 195.195, 591.341, 549.299, 195.195, 591.341, 549.549, 195.195, 590.34, 551.551, 192.192, 523.273, 550.8, 191.692, 522.272, 549.549, 191.692, 522.272, 526.026, 191.942, 539.539, 529.779, 191.942, 537.287, 540.79, 192.943, 530.28, 548.048, 192.943, 525.775, 544.794, 192.693, 525.775, 540.29, 192.693, 529.279, 533.033, 191.942, 534.284, 526.026, 191.942, 539.539, 548.798, 191.441, 521.271, 547.547, 191.441, 521.271, 544.294, 192.192, 524.274, 528.278, 191.692, 537.287, 519.519, 195.195, 593.843, 519.769, 195.445, 594.344, 534.534, 195.195, 595.345, 541.291, 195.445, 595.345, 524.774, 195.445, 596.346, 534.284, 195.195, 596.346, 553.553, 192.192, 523.273, 553.803, 195.195, 590.34, 553.553, 195.195, 534.284, 553.553, 193.944, 527.777, 526.026, 194.194, 545.795, 528.778, 195.195, 550.55, 535.285, 193.944, 541.791, 538.288, 195.195, 546.296, 548.798, 194.194, 529.779, 548.798, 194.695, 532.782, 523.023, 194.695, 549.549, 522.522, 195.195, 554.804, 586.336, 195.195, 567.567, 587.337, 195.195, 567.317, 587.337, 195.195, 566.566, 589.339, 195.195, 563.563, 590.34, 195.195, 563.313, 590.34, 195.195, 562.562, 591.341, 195.195, 562.312, 591.341, 195.195, 561.561, 592.342, 195.195, 561.311, 592.342, 195.195, 560.56, 556.306, 195.195, 589.589, 557.307, 195.195, 589.339, 557.557, 195.195, 588.338, 583.333, 195.195, 569.569, 584.334, 195.195, 569.319, 584.584, 195.195, 568.318, 588.338, 195.195, 566.316, 588.588, 195.195, 565.315, 593.343, 195.195, 560.31, 593.593, 195.195, 559.309, 592.342, 195.195, 534.034, 592.342, 195.445, 532.782, 591.841, 195.445, 532.282, 590.59, 195.195, 532.282, 586.336, 195.195, 568.318, 589.339, 195.195, 565.315, 577.327, 195.195, 586.586, 578.328, 195.445, 586.336, 578.328, 195.195, 584.584, 579.329, 195.195, 581.581, 580.33, 195.445, 581.331, 580.33, 195.195, 579.579, 581.331, 195.195, 576.576, 582.332, 195.195, 576.326, 582.332, 195.195, 574.574, 595.345, 195.195, 540.04, 595.345, 195.195, 538.788, 594.344, 195.195, 538.038, 594.344, 195.195, 536.786, 593.343, 195.195, 536.036, 593.343, 195.195, 534.784, 587.587, 195.195, 530.28, 586.836, 195.195, 529.279, 585.585, 195.195, 529.279, 584.834, 194.695, 528.278, 583.583, 194.695, 528.278, 575.575, 195.445, 588.338, 577.327, 195.445, 588.338, 567.567, 193.694, 525.275, 559.559, 192.943, 524.274, 566.816, 193.944, 525.775, 571.071, 193.944, 526.526, 556.306, 195.445, 590.34, 594.344, 195.195, 559.309, 594.344, 195.195, 556.556, 560.31, 195.195, 588.338, 560.56, 195.195, 587.337, 579.329, 195.195, 584.334, 581.331, 195.445, 579.329, 588.838, 195.195, 530.28, 571.821, 195.445, 589.339, 575.325, 195.445, 589.339, 571.071, 195.445, 588.338, 582.832, 194.194, 527.277, 579.579, 194.444, 527.277, 578.828, 193.944, 526.276, 575.575, 193.944, 526.276, 595.345, 195.195, 551.551, 565.065, 195.195, 587.337, 583.333, 195.195, 574.324, 595.345, 195.195, 556.306, 565.815, 195.445, 588.338, 558.808, 192.442, 523.273, 563.813, 193.694, 525.275, 574.824, 193.694, 525.275, 566.816, 193.443, 524.274, 554.804, 194.695, 529.779, 596.346, 195.195, 551.301, 596.346, 195.195, 540.79, 445.445, 219.469, 560.06, 445.445, 219.219, 559.309, 444.694, 219.469, 559.309, 435.435, 221.471, 551.051, 435.435, 221.471, 550.3, 434.684, 221.722, 550.3, 426.426, 222.973, 544.044, 426.426, 223.223, 543.293, 425.675, 222.973, 543.293, 401.151, 223.223, 542.292, 400.4, 223.473, 542.292, 400.15, 223.223, 543.293, 399.399, 223.473, 543.293, 399.149, 223.223, 544.294, 398.398, 223.473, 544.294, 398.148, 223.223, 545.295, 395.145, 223.724, 547.297, 394.394, 223.974, 547.297, 394.144, 223.974, 548.298, 393.393, 224.224, 548.298, 393.143, 223.974, 549.299, 390.14, 224.725, 551.301, 389.389, 224.725, 551.301, 389.139, 224.725, 552.302, 381.131, 224.474, 560.31, 380.38, 224.474, 560.31, 380.13, 224.224, 561.311, 408.408, 224.474, 534.034, 407.407, 224.474, 534.284, 407.157, 224.224, 535.285, 405.405, 223.974, 536.036, 404.404, 224.224, 536.286, 404.154, 223.974, 537.287, 402.402, 223.223, 541.041, 401.401, 223.473, 541.291, 423.423, 223.223, 541.041, 417.667, 222.222, 541.041, 413.663, 221.972, 541.041, 409.409, 221.972, 541.041, 408.658, 221.972, 542.042, 415.916, 221.972, 541.541, 396.396, 223.724, 546.046, 395.395, 223.974, 546.296, 391.391, 224.474, 550.049, 390.39, 224.725, 550.3, 382.382, 224.474, 559.059, 381.381, 224.725, 559.309, 378.378, 222.472, 567.067, 377.377, 222.472, 567.317, 377.127, 222.222, 568.318, 376.376, 220.47, 579.079, 376.376, 220.22, 582.582, 377.377, 220.47, 575.575, 376.626, 220.47, 575.075, 410.16, 224.725, 533.283, 408.408, 224.725, 533.283, 405.405, 224.224, 535.285, 403.403, 223.974, 537.287, 403.403, 223.473, 539.039, 396.396, 223.724, 545.295, 391.391, 224.474, 549.299, 433.934, 221.972, 549.299, 432.682, 222.222, 549.299, 431.932, 222.472, 548.298, 430.68, 222.472, 548.298, 429.93, 222.723, 547.297, 428.678, 222.723, 547.297, 427.427, 222.723, 546.046, 427.427, 222.973, 544.794, 412.162, 225.225, 532.282, 410.41, 224.975, 532.282, 402.402, 223.724, 539.289, 387.137, 224.975, 554.304, 385.385, 225.225, 554.304, 385.135, 224.975, 555.305, 383.383, 224.975, 557.057, 382.382, 224.975, 557.307, 383.383, 225.475, 555.305, 387.387, 225.225, 552.302, 379.379, 224.224, 561.311, 379.379, 223.473, 564.064, 375.375, 220.47, 579.329, 375.375, 220.47, 581.831, 423.423, 223.724, 538.788, 422.422, 223.724, 538.038, 378.378, 223.473, 564.314, 452.452, 218.468, 584.834, 452.452, 218.468, 572.822, 451.451, 218.719, 572.072, 447.447, 219.219, 563.062, 447.447, 218.969, 561.811, 439.689, 220.47, 554.304, 437.938, 220.721, 552.302, 436.686, 221.221, 552.302, 449.449, 218.969, 567.067, 449.449, 218.719, 564.814, 443.443, 219.72, 558.058, 443.443, 219.469, 556.806, 440.941, 219.97, 554.304, 416.917, 225.976, 531.281, 412.412, 225.475, 531.281, 405.906, 221.972, 542.792, 413.163, 221.722, 542.042, 420.42, 222.472, 541.291, 403.904, 221.722, 545.795, 409.659, 220.971, 546.046, 416.917, 220.971, 546.546, 418.668, 221.221, 545.795, 411.411, 220.971, 545.795, 451.451, 218.719, 568.818, 432.933, 221.972, 551.051, 435.185, 221.221, 553.053, 417.667, 221.972, 541.791, 407.657, 221.722, 543.293, 376.376, 220.22, 584.834, 435.185, 220.22, 584.834, 449.95, 219.219, 574.824, 390.14, 224.224, 554.054, 387.387, 224.224, 557.307, 384.384, 223.974, 560.56, 377.627, 220.47, 574.574, 419.92, 220.47, 553.803, 395.896, 220.47, 565.815, 443.944, 220.47, 570.32, 392.893, 221.221, 562.812, 436.436, 220.971, 568.818, 421.421, 220.22, 567.317, 430.43, 221.471, 553.803, 439.439, 220.971, 565.815, 443.944, 219.97, 580.83, 428.929, 220.47, 562.812, 388.388, 221.972, 564.314, 422.923, 220.971, 550.8, 385.385, 220.971, 570.32, 383.884, 220.47, 573.323, 410.911, 220.47, 550.8, 398.899, 222.222, 549.299, 403.403, 221.221, 549.299, 395.896, 222.222, 555.305, 401.902, 220.721, 555.305, 433.433, 220.47, 570.32, 436.436, 220.721, 573.323, 385.385, 221.972, 565.815, 433.433, 221.221, 556.806, 440.941, 220.721, 561.311, 437.938, 220.721, 556.806, 395.896, 220.721, 562.812, 391.391, 220.721, 568.818, 403.403, 220.22, 573.323, 422.422, 224.224, 536.786, 413.914, 223.223, 537.287, 406.406, 222.973, 538.788, 410.911, 224.224, 534.284, 376.376, 222.222, 568.318, 376.376, 220.971, 572.322, 514.764, 195.445, 592.342, 518.018, 195.195, 592.342, 522.272, 195.195, 554.304, 522.772, 194.695, 549.299, 485.735, 200.701, 579.329, 486.486, 200.701, 579.329, 486.486, 199.7, 576.576, 479.229, 198.448, 573.323, 478.228, 200.701, 578.328, 480.73, 200.2, 578.828, 483.984, 199.449, 575.325, 481.481, 199.449, 576.326, 478.478, 198.699, 573.323, 488.488, 206.206, 593.093, 488.488, 205.706, 591.841, 487.487, 205.205, 591.091, 480.48, 206.456, 594.594, 480.48, 207.207, 595.845, 481.481, 207.457, 596.596, 477.477, 200.951, 578.328, 477.477, 201.451, 581.081, 476.476, 201.702, 581.331, 476.476, 202.452, 583.833, 477.477, 202.202, 584.584, 489.489, 207.207, 596.096, 489.489, 206.456, 593.843, 487.487, 204.454, 588.838, 486.486, 204.204, 588.088, 479.479, 204.955, 591.591, 481.982, 204.705, 591.341, 481.731, 204.204, 590.34, 486.486, 203.453, 585.835, 485.485, 202.953, 585.085, 478.478, 203.704, 588.588, 479.98, 201.952, 584.834, 482.983, 203.453, 586.836, 479.729, 202.703, 586.836, 478.478, 204.705, 590.84, 479.479, 206.206, 593.843, 481.481, 208.709, 598.848, 482.482, 208.959, 599.599, 484.734, 207.958, 598.348, 482.983, 201.952, 582.332, 478.228, 200.951, 580.83, 477.477, 203.704, 587.837, 490.49, 208.959, 600.35, 490.49, 207.708, 596.846, 482.482, 209.209, 600.35, 486.486, 208.709, 600.35, 484.484, 206.206, 594.344, 453.703, 218.218, 589.339, 453.453, 218.218, 587.837, 452.452, 218.468, 587.087, 377.377, 220.22, 590.84, 428.929, 220.22, 589.839, 451.201, 218.719, 589.339, 430.68, 220.22, 588.338, 376.376, 220.22, 589.839, 454.454, 218.218, 591.091, 454.454, 218.218, 589.839, 379.379, 220.22, 596.596, 381.131, 220.22, 599.599, 397.647, 220.47, 597.597, 402.402, 219.97, 597.097, 425.926, 219.97, 594.344, 404.905, 219.97, 595.845, 397.397, 220.47, 594.344, 409.409, 219.97, 592.842, 456.456, 217.968, 595.095, 456.456, 217.968, 593.843, 455.455, 218.218, 593.093, 395.645, 220.47, 598.848, 405.405, 219.72, 598.098, 422.422, 219.97, 597.097, 445.695, 218.468, 593.843, 424.174, 219.97, 595.845, 407.407, 219.72, 597.347, 395.395, 220.47, 598.348, 455.455, 218.218, 591.841, 379.379, 220.22, 597.847, 458.458, 217.718, 598.098, 458.458, 217.718, 596.846, 396.146, 220.47, 599.349, 403.653, 219.72, 599.099, 420.921, 219.97, 598.848, 445.445, 218.218, 597.347, 436.436, 219.219, 597.347, 377.377, 219.72, 595.845, 378.378, 220.22, 595.595, 377.377, 220.22, 594.594, 459.459, 217.467, 599.099, 396.146, 220.47, 599.599, 403.904, 219.72, 599.599, 421.421, 219.97, 599.349, 377.627, 218.969, 598.348, 377.878, 219.469, 597.347, 377.377, 219.219, 597.097, 377.377, 218.468, 599.849, 460.46, 217.467, 601.101, 460.46, 217.467, 599.849, 396.396, 220.47, 599.849, 404.154, 219.72, 600.1, 421.922, 219.97, 600.35, 447.697, 217.968, 600.85, 379.629, 218.969, 600.35, 378.378, 218.468, 600.6, 379.379, 218.218, 606.856, 463.713, 217.718, 605.355, 462.462, 217.467, 604.104, 451.701, 217.467, 604.604, 448.949, 217.968, 604.604, 422.172, 219.97, 605.355, 414.164, 219.97, 605.605, 406.156, 219.219, 606.106, 390.14, 219.469, 606.606, 382.132, 218.969, 606.856, 382.132, 218.969, 606.856, 390.14, 219.469, 606.606, 406.656, 219.219, 606.356, 414.664, 219.97, 606.356, 422.923, 219.97, 606.106, 452.702, 217.467, 605.605, 380.881, 219.72, 600.35, 378.378, 217.718, 605.855, 380.63, 218.969, 601.601, 462.462, 217.467, 602.852, 382.382, 219.469, 601.851, 407.908, 219.469, 601.851, 412.412, 219.97, 601.851, 401.902, 219.469, 603.353, 397.397, 219.72, 604.854, 478.478, 215.465, 611.111, 477.477, 215.716, 611.361, 477.477, 215.966, 612.112, 491.491, 213.213, 612.112, 485.485, 213.714, 611.611, 481.231, 214.464, 611.361, 481.481, 214.715, 612.112, 476.476, 216.216, 612.362, 476.476, 216.216, 613.113, 480.48, 213.213, 607.107, 479.479, 213.714, 607.357, 479.479, 214.464, 609.109, 478.478, 214.965, 609.359, 482.482, 211.712, 605.105, 480.48, 212.462, 605.355, 491.741, 214.715, 616.366, 492.492, 214.715, 616.366, 492.492, 213.463, 612.862, 491.491, 214.965, 616.866, 484.484, 214.965, 615.115, 475.976, 216.466, 613.363, 482.983, 215.215, 614.864, 491.491, 209.459, 601.851, 490.49, 209.209, 601.101, 486.486, 209.96, 603.103, 485.986, 211.712, 606.356, 481.481, 213.964, 609.359, 464.464, 217.718, 607.107, 464.464, 217.718, 605.855, 379.379, 217.718, 611.861, 380.38, 217.718, 612.862, 385.886, 218.218, 612.612, 399.399, 218.218, 611.611, 415.665, 219.97, 610.36, 426.426, 219.72, 609.609, 456.206, 217.217, 607.607, 461.711, 217.968, 607.357, 382.382, 218.719, 609.359, 468.718, 217.467, 611.361, 386.136, 218.218, 612.862, 403.153, 218.218, 612.612, 411.661, 219.469, 612.362, 420.17, 219.97, 612.112, 454.454, 217.217, 611.611, 462.963, 217.718, 611.361, 457.457, 217.217, 609.359, 387.387, 215.215, 653.653, 387.387, 215.215, 654.404, 388.138, 215.465, 654.404, 454.454, 220.971, 649.649, 455.455, 220.721, 649.399, 455.455, 220.721, 648.648, 465.465, 218.218, 643.643, 466.466, 218.218, 643.393, 466.466, 218.218, 642.642, 476.476, 217.718, 637.637, 477.477, 217.718, 637.387, 477.477, 217.718, 636.636, 478.478, 217.217, 636.386, 478.478, 216.967, 635.635, 479.479, 216.466, 635.385, 479.479, 216.216, 634.634, 480.48, 215.716, 634.384, 480.48, 215.716, 633.633, 483.483, 215.966, 631.631, 484.484, 216.216, 631.381, 484.484, 216.466, 630.63, 486.486, 217.467, 626.626, 487.487, 217.467, 626.376, 487.487, 217.467, 625.625, 423.423, 216.216, 659.659, 424.424, 216.466, 659.409, 424.674, 216.466, 658.408, 405.155, 216.216, 660.41, 405.906, 216.466, 661.411, 419.669, 215.966, 660.41, 421.922, 215.465, 658.658, 416.166, 215.716, 659.159, 412.162, 216.466, 659.659, 409.91, 216.717, 661.161, 416.917, 215.716, 660.66, 448.448, 221.972, 652.652, 449.449, 221.722, 652.402, 449.699, 221.722, 651.401, 456.456, 220.47, 648.398, 456.706, 220.22, 647.397, 458.458, 219.72, 646.646, 459.459, 219.469, 646.396, 459.709, 219.469, 645.395, 467.467, 217.968, 642.392, 467.717, 218.218, 641.391, 481.481, 215.465, 633.383, 481.731, 215.465, 632.382, 485.485, 216.717, 630.38, 485.735, 217.217, 629.379, 488.488, 217.467, 625.375, 488.738, 217.217, 624.374, 489.489, 216.216, 620.62, 452.702, 221.221, 650.4, 454.454, 221.221, 650.4, 458.458, 219.97, 647.397, 474.724, 217.718, 638.388, 476.476, 217.718, 638.388, 483.483, 215.716, 632.382, 490.49, 215.716, 618.618, 491.491, 215.465, 618.368, 482.482, 215.465, 615.865, 380.38, 214.715, 637.637, 380.38, 214.464, 638.888, 381.381, 214.464, 639.639, 382.382, 214.715, 643.643, 382.382, 214.715, 644.894, 383.383, 214.715, 645.645, 470.72, 218.218, 640.39, 472.472, 217.718, 640.39, 472.722, 217.968, 639.389, 474.474, 217.718, 639.389, 490.49, 216.216, 620.37, 472.722, 217.217, 613.363, 471.972, 217.217, 612.362, 470.72, 217.467, 612.362, 479.729, 217.217, 628.628, 478.728, 217.467, 626.126, 478.228, 217.467, 626.126, 479.479, 217.217, 628.628, 469.97, 217.467, 611.361, 445.695, 221.972, 653.403, 448.448, 221.972, 653.403, 462.712, 218.719, 644.394, 465.465, 218.218, 644.394, 486.486, 217.467, 629.379, 400.901, 215.966, 661.411, 403.403, 215.966, 661.411, 403.653, 215.966, 660.41, 400.15, 215.966, 660.41, 383.383, 214.715, 647.897, 384.384, 214.715, 648.648, 433.683, 219.72, 657.407, 436.436, 220.47, 657.407, 436.686, 220.47, 656.406, 439.439, 221.221, 656.406, 439.689, 221.221, 655.405, 442.442, 221.722, 655.405, 442.692, 221.722, 654.404, 445.445, 221.972, 654.404, 452.452, 221.471, 651.401, 462.462, 218.719, 645.395, 470.47, 217.968, 641.391, 443.443, 221.722, 653.903, 451.451, 221.221, 649.149, 444.694, 221.722, 652.402, 437.938, 220.971, 655.655, 423.423, 216.216, 660.41, 489.489, 217.467, 624.374, 380.38, 215.215, 633.133, 379.379, 215.215, 633.383, 379.379, 214.715, 636.886, 381.381, 214.464, 642.892, 419.419, 215.966, 661.411, 409.91, 216.967, 661.411, 416.666, 215.716, 661.411, 476.476, 217.718, 636.886, 423.673, 215.966, 657.907, 420.921, 215.465, 658.408, 417.918, 215.465, 658.658, 410.911, 216.466, 659.659, 384.384, 214.965, 650.9, 477.477, 217.467, 636.136, 394.144, 215.966, 659.409, 394.895, 216.216, 660.41, 397.397, 215.716, 660.41, 382.632, 214.715, 638.138, 382.382, 215.465, 633.633, 381.631, 215.966, 626.376, 380.881, 217.467, 617.367, 476.977, 217.467, 636.386, 388.138, 215.215, 648.898, 396.646, 214.715, 654.654, 399.149, 214.965, 656.156, 401.401, 215.966, 657.907, 461.461, 218.468, 638.388, 463.463, 218.218, 631.131, 464.965, 217.217, 625.625, 466.466, 216.967, 619.869, 467.217, 217.467, 617.117, 404.905, 214.214, 649.899, 436.436, 218.969, 637.887, 421.421, 214.464, 652.902, 430.43, 218.468, 643.893, 413.914, 214.214, 646.896, 415.415, 218.468, 630.38, 409.409, 214.965, 640.89, 403.403, 216.967, 634.884, 395.896, 215.215, 640.89, 412.412, 214.214, 651.401, 401.902, 215.716, 642.392, 398.899, 214.214, 649.899, 406.406, 217.217, 624.374, 461.962, 217.718, 616.866, 425.926, 219.72, 628.878, 419.92, 216.466, 645.395, 403.403, 214.214, 652.902, 415.415, 215.465, 642.392, 421.421, 218.468, 634.884, 454.454, 217.467, 625.875, 461.962, 217.968, 625.875, 418.418, 214.214, 654.404, 409.409, 217.217, 631.881, 409.409, 216.967, 634.884, 433.433, 218.969, 648.398, 419.92, 214.464, 651.401, 409.409, 216.216, 657.407, 407.908, 214.715, 654.404, 406.406, 215.966, 657.407, 418.418, 214.965, 649.899, 452.953, 218.468, 634.884, 389.89, 215.465, 639.389, 428.929, 217.718, 649.899, 425.926, 216.717, 648.398, 424.424, 215.465, 654.404, 430.43, 218.468, 655.905, 422.923, 214.965, 655.905, 413.914, 218.468, 622.872, 440.941, 219.97, 645.395, 389.89, 214.965, 642.392, 410.911, 215.215, 655.905, 415.415, 215.716, 657.407, 413.914, 213.964, 649.899, 415.415, 214.464, 651.401, 392.893, 215.215, 643.893, 397.397, 215.966, 636.386, 400.4, 216.967, 631.881, 395.896, 216.717, 625.875, 461.962, 217.467, 621.371, 415.415, 214.715, 654.404, 445.445, 217.718, 621.371, 433.433, 219.219, 616.866, 464.965, 217.217, 616.866, 437.938, 219.97, 646.896, 383.884, 217.467, 615.365, 466.466, 217.718, 613.863, 419.92, 215.465, 657.407, 410.911, 217.968, 628.878, 416.917, 219.469, 618.368, 427.427, 219.72, 616.866, 412.412, 217.217, 633.383, 427.427, 218.969, 636.386, 400.4, 213.964, 651.401, 419.92, 214.715, 654.404, 416.917, 216.466, 640.89, 413.914, 215.465, 640.89, 443.944, 219.219, 637.887, 443.944, 218.468, 633.383, 437.938, 218.468, 624.374, 448.448, 219.97, 643.893, 454.454, 219.97, 643.893, 400.4, 217.217, 625.875, 389.89, 217.467, 616.866, 392.893, 217.718, 618.368, 400.4, 217.217, 621.371, 385.385, 217.217, 619.869, 451.451, 217.718, 618.368, 397.397, 215.215, 643.893, 407.908, 217.467, 628.878, 412.412, 215.966, 657.407, 385.385, 215.716, 628.878, 392.893, 216.466, 630.38, 389.89, 216.466, 627.377, 401.902, 215.465, 655.905, 412.412, 218.468, 624.374, 434.935, 219.219, 640.89, 406.406, 216.216, 637.887, 404.905, 215.716, 639.389, 400.4, 216.216, 637.887, 480.48, 215.465, 633.133, 476.977, 217.217, 635.385, 474.724, 217.718, 636.886, 392.893, 216.216, 659.409, 486.987, 217.217, 624.124, 485.485, 217.217, 626.376, 472.472, 217.217, 631.881, 478.478, 216.466, 631.881, 467.968, 217.968, 630.38, 470.971, 217.217, 628.878, 475.475, 217.467, 630.38, 469.469, 218.218, 637.887, 469.469, 217.467, 633.383, 470.971, 216.967, 621.371, 472.472, 217.467, 636.386, 470.971, 217.718, 634.884, 433.433, 219.72, 658.408, 476.977, 216.717, 618.368, 482.732, 216.967, 625.875, 482.983, 216.717, 621.371, 481.481, 216.967, 628.878, 392.893, 215.465, 654.404, 398.899, 215.215, 657.407, 400.4, 215.966, 658.908)
polygons = [PackedInt32Array(2, 1, 0), PackedInt32Array(5, 4, 3), PackedInt32Array(7, 6, 5), PackedInt32Array(9, 8, 7), PackedInt32Array(11, 10, 9), PackedInt32Array(13, 12, 11), PackedInt32Array(15, 14, 13), PackedInt32Array(17, 16, 0), PackedInt32Array(0, 16, 19), PackedInt32Array(0, 19, 18), PackedInt32Array(21, 20, 3), PackedInt32Array(20, 22, 2), PackedInt32Array(25, 24, 23), PackedInt32Array(28, 27, 26), PackedInt32Array(30, 29, 28), PackedInt32Array(32, 31, 30), PackedInt32Array(34, 33, 32), PackedInt32Array(36, 35, 34), PackedInt32Array(39, 38, 37), PackedInt32Array(42, 41, 40), PackedInt32Array(44, 43, 42), PackedInt32Array(46, 45, 44), PackedInt32Array(48, 47, 46), PackedInt32Array(50, 49, 48), PackedInt32Array(52, 51, 15), PackedInt32Array(54, 53, 25), PackedInt32Array(56, 55, 54), PackedInt32Array(59, 58, 57), PackedInt32Array(62, 61, 60), PackedInt32Array(37, 63, 36), PackedInt32Array(66, 65, 64), PackedInt32Array(68, 67, 56), PackedInt32Array(57, 69, 68), PackedInt32Array(71, 70, 59), PackedInt32Array(60, 72, 71), PackedInt32Array(3, 20, 2), PackedInt32Array(74, 73, 39), PackedInt32Array(64, 76, 75), PackedInt32Array(26, 78, 77), PackedInt32Array(52, 15, 13), PackedInt32Array(2, 5, 3), PackedInt32Array(40, 79, 74), PackedInt32Array(54, 25, 23), PackedInt32Array(81, 80, 62), PackedInt32Array(37, 36, 39), PackedInt32Array(39, 36, 74), PackedInt32Array(74, 36, 40), PackedInt32Array(52, 13, 11), PackedInt32Array(77, 28, 26), PackedInt32Array(2, 7, 5), PackedInt32Array(59, 57, 68), PackedInt32Array(62, 60, 71), PackedInt32Array(64, 75, 66), PackedInt32Array(66, 75, 83), PackedInt32Array(66, 83, 84), PackedInt32Array(84, 83, 82), PackedInt32Array(52, 11, 9), PackedInt32Array(87, 86, 85), PackedInt32Array(77, 88, 87), PackedInt32Array(50, 90, 89), PackedInt32Array(7, 2, 9), PackedInt32Array(9, 2, 91), PackedInt32Array(9, 91, 52), PackedInt32Array(52, 91, 92), PackedInt32Array(92, 91, 18), PackedInt32Array(94, 93, 18), PackedInt32Array(18, 93, 81), PackedInt32Array(90, 50, 75), PackedInt32Array(75, 50, 48), PackedInt32Array(75, 44, 42), PackedInt32Array(54, 23, 56), PackedInt32Array(56, 23, 98), PackedInt32Array(98, 23, 97), PackedInt32Array(98, 97, 96), PackedInt32Array(98, 96, 99), PackedInt32Array(99, 96, 100), PackedInt32Array(100, 96, 95), PackedInt32Array(100, 95, 36), PackedInt32Array(30, 28, 77), PackedInt32Array(75, 46, 44), PackedInt32Array(101, 52, 102), PackedInt32Array(102, 52, 85), PackedInt32Array(36, 103, 40), PackedInt32Array(40, 103, 104), PackedInt32Array(104, 103, 75), PackedInt32Array(40, 104, 42), PackedInt32Array(42, 104, 75), PackedInt32Array(59, 68, 56), PackedInt32Array(18, 81, 105), PackedInt32Array(105, 81, 62), PackedInt32Array(105, 62, 106), PackedInt32Array(106, 62, 71), PackedInt32Array(106, 71, 59), PackedInt32Array(32, 30, 77), PackedInt32Array(16, 107, 19), PackedInt32Array(19, 107, 18), PackedInt32Array(46, 75, 48), PackedInt32Array(34, 32, 77), PackedInt32Array(87, 85, 52), PackedInt32Array(34, 77, 36), PackedInt32Array(36, 77, 87), PackedInt32Array(109, 110, 82), PackedInt32Array(82, 110, 84), PackedInt32Array(84, 110, 108), PackedInt32Array(84, 108, 66), PackedInt32Array(95, 127, 36), PackedInt32Array(36, 127, 103), PackedInt32Array(103, 132, 75), PackedInt32Array(75, 122, 83), PackedInt32Array(83, 120, 82), PackedInt32Array(82, 121, 113), PackedInt32Array(113, 114, 111), PackedInt32Array(114, 118, 115), PackedInt32Array(115, 124, 116), PackedInt32Array(116, 129, 117), PackedInt32Array(117, 23, 112), PackedInt32Array(23, 117, 97), PackedInt32Array(97, 129, 96), PackedInt32Array(96, 126, 95), PackedInt32Array(95, 125, 127), PackedInt32Array(127, 131, 103), PackedInt32Array(132, 119, 75), PackedInt32Array(103, 131, 132), PackedInt32Array(122, 120, 83), PackedInt32Array(75, 119, 122), PackedInt32Array(120, 121, 82), PackedInt32Array(121, 114, 113), PackedInt32Array(118, 128, 115), PackedInt32Array(114, 121, 118), PackedInt32Array(124, 129, 116), PackedInt32Array(115, 128, 124), PackedInt32Array(129, 97, 117), PackedInt32Array(129, 124, 96), PackedInt32Array(126, 125, 95), PackedInt32Array(96, 124, 126), PackedInt32Array(125, 130, 127), PackedInt32Array(127, 130, 131), PackedInt32Array(132, 131, 119), PackedInt32Array(122, 128, 120), PackedInt32Array(119, 130, 122), PackedInt32Array(120, 118, 121), PackedInt32Array(118, 120, 128), PackedInt32Array(128, 123, 124), PackedInt32Array(126, 130, 125), PackedInt32Array(124, 123, 126), PackedInt32Array(130, 119, 131), PackedInt32Array(122, 123, 128), PackedInt32Array(130, 123, 122), PackedInt32Array(126, 123, 130), PackedInt32Array(2, 0, 91), PackedInt32Array(91, 0, 18), PackedInt32Array(87, 135, 36), PackedInt32Array(36, 135, 100), PackedInt32Array(100, 134, 99), PackedInt32Array(99, 137, 98), PackedInt32Array(98, 136, 56), PackedInt32Array(56, 136, 59), PackedInt32Array(59, 136, 106), PackedInt32Array(106, 137, 105), PackedInt32Array(105, 134, 18), PackedInt32Array(18, 134, 92), PackedInt32Array(92, 133, 52), PackedInt32Array(52, 133, 87), PackedInt32Array(87, 133, 135), PackedInt32Array(135, 133, 100), PackedInt32Array(134, 137, 99), PackedInt32Array(100, 133, 134), PackedInt32Array(137, 136, 98), PackedInt32Array(136, 137, 106), PackedInt32Array(137, 134, 105), PackedInt32Array(134, 133, 92), PackedInt32Array(140, 139, 138), PackedInt32Array(143, 142, 141), PackedInt32Array(146, 145, 144), PackedInt32Array(149, 148, 147), PackedInt32Array(138, 151, 150), PackedInt32Array(141, 153, 152), PackedInt32Array(156, 155, 154), PackedInt32Array(144, 157, 156), PackedInt32Array(160, 159, 158), PackedInt32Array(163, 162, 161), PackedInt32Array(165, 164, 163), PackedInt32Array(167, 166, 165), PackedInt32Array(170, 169, 168), PackedInt32Array(172, 171, 160), PackedInt32Array(174, 173, 167), PackedInt32Array(140, 138, 150), PackedInt32Array(143, 141, 152), PackedInt32Array(146, 144, 156), PackedInt32Array(176, 175, 177), PackedInt32Array(177, 175, 179), PackedInt32Array(177, 179, 180), PackedInt32Array(180, 179, 178), PackedInt32Array(182, 181, 150), PackedInt32Array(150, 181, 183), PackedInt32Array(186, 185, 184), PackedInt32Array(188, 187, 170), PackedInt32Array(161, 189, 172), PackedInt32Array(154, 143, 191), PackedInt32Array(191, 143, 152), PackedInt32Array(191, 152, 192), PackedInt32Array(192, 152, 190), PackedInt32Array(192, 190, 178), PackedInt32Array(158, 194, 193), PackedInt32Array(196, 195, 197), PackedInt32Array(197, 195, 186), PackedInt32Array(197, 186, 184), PackedInt32Array(175, 198, 188), PackedInt32Array(160, 158, 172), PackedInt32Array(172, 158, 161), PackedInt32Array(161, 158, 193), PackedInt32Array(174, 167, 165), PackedInt32Array(154, 146, 156), PackedInt32Array(179, 199, 178), PackedInt32Array(199, 200, 168), PackedInt32Array(168, 200, 170), PackedInt32Array(170, 200, 188), PackedInt32Array(188, 201, 175), PackedInt32Array(175, 199, 179), PackedInt32Array(199, 201, 200), PackedInt32Array(200, 201, 188), PackedInt32Array(201, 199, 175), PackedInt32Array(112, 202, 174), PackedInt32Array(163, 174, 165), PackedInt32Array(140, 150, 152), PackedInt32Array(152, 150, 190), PackedInt32Array(190, 150, 183), PackedInt32Array(190, 183, 178), PackedInt32Array(193, 203, 149), PackedInt32Array(197, 220, 196), PackedInt32Array(196, 211, 205), PackedInt32Array(205, 219, 206), PackedInt32Array(206, 214, 178), PackedInt32Array(178, 214, 192), PackedInt32Array(192, 225, 191), PackedInt32Array(191, 225, 154), PackedInt32Array(154, 218, 146), PackedInt32Array(146, 213, 204), PackedInt32Array(204, 213, 207), PackedInt32Array(207, 210, 208), PackedInt32Array(208, 217, 209), PackedInt32Array(209, 222, 184), PackedInt32Array(184, 222, 197), PackedInt32Array(220, 211, 196), PackedInt32Array(197, 221, 220), PackedInt32Array(211, 219, 205), PackedInt32Array(219, 215, 206), PackedInt32Array(206, 215, 214), PackedInt32Array(214, 216, 192), PackedInt32Array(192, 216, 225), PackedInt32Array(225, 218, 154), PackedInt32Array(218, 212, 146), PackedInt32Array(146, 212, 213), PackedInt32Array(213, 210, 207), PackedInt32Array(210, 211, 208), PackedInt32Array(217, 221, 209), PackedInt32Array(208, 211, 217), PackedInt32Array(209, 223, 222), PackedInt32Array(222, 223, 197), PackedInt32Array(220, 217, 211), PackedInt32Array(221, 217, 220), PackedInt32Array(197, 223, 221), PackedInt32Array(211, 210, 219), PackedInt32Array(219, 224, 215), PackedInt32Array(215, 216, 214), PackedInt32Array(216, 218, 225), PackedInt32Array(218, 224, 212), PackedInt32Array(212, 210, 213), PackedInt32Array(221, 223, 209), PackedInt32Array(210, 224, 219), PackedInt32Array(224, 218, 215), PackedInt32Array(215, 218, 216), PackedInt32Array(224, 210, 212), PackedInt32Array(227, 226, 195), PackedInt32Array(195, 226, 186), PackedInt32Array(163, 161, 174), PackedInt32Array(174, 161, 112), PackedInt32Array(196, 228, 195), PackedInt32Array(193, 149, 147), PackedInt32Array(196, 205, 168), PackedInt32Array(168, 205, 199), PackedInt32Array(199, 205, 206), PackedInt32Array(199, 206, 178), PackedInt32Array(204, 229, 146), PackedInt32Array(111, 235, 184), PackedInt32Array(184, 235, 209), PackedInt32Array(209, 234, 208), PackedInt32Array(208, 231, 207), PackedInt32Array(207, 230, 204), PackedInt32Array(204, 230, 193), PackedInt32Array(193, 230, 161), PackedInt32Array(161, 117, 112), PackedInt32Array(117, 233, 116), PackedInt32Array(116, 238, 115), PackedInt32Array(115, 232, 114), PackedInt32Array(114, 235, 111), PackedInt32Array(235, 114, 209), PackedInt32Array(234, 237, 208), PackedInt32Array(209, 232, 234), PackedInt32Array(231, 230, 207), PackedInt32Array(208, 238, 231), PackedInt32Array(230, 233, 161), PackedInt32Array(161, 233, 117), PackedInt32Array(233, 236, 116), PackedInt32Array(238, 237, 115), PackedInt32Array(116, 236, 238), PackedInt32Array(232, 209, 114), PackedInt32Array(115, 237, 232), PackedInt32Array(237, 238, 208), PackedInt32Array(234, 232, 237), PackedInt32Array(231, 236, 230), PackedInt32Array(238, 236, 231), PackedInt32Array(230, 236, 233), PackedInt32Array(193, 147, 204), PackedInt32Array(241, 240, 239), PackedInt32Array(244, 243, 242), PackedInt32Array(247, 246, 245), PackedInt32Array(250, 249, 248), PackedInt32Array(252, 251, 253), PackedInt32Array(253, 251, 254), PackedInt32Array(256, 255, 241), PackedInt32Array(259, 258, 257), PackedInt32Array(262, 261, 260), PackedInt32Array(248, 247, 263), PackedInt32Array(263, 247, 257), PackedInt32Array(183, 181, 262), PackedInt32Array(239, 256, 241), PackedInt32Array(242, 265, 264), PackedInt32Array(260, 266, 259), PackedInt32Array(244, 242, 264), PackedInt32Array(262, 260, 183), PackedInt32Array(183, 260, 259), PackedInt32Array(251, 244, 264), PackedInt32Array(257, 267, 250), PackedInt32Array(183, 257, 270), PackedInt32Array(270, 257, 247), PackedInt32Array(270, 247, 269), PackedInt32Array(270, 269, 268), PackedInt32Array(268, 269, 271), PackedInt32Array(268, 271, 256), PackedInt32Array(254, 251, 264), PackedInt32Array(248, 263, 250), PackedInt32Array(250, 263, 257), PackedInt32Array(257, 183, 259), PackedInt32Array(245, 254, 264), PackedInt32Array(245, 264, 247), PackedInt32Array(247, 264, 269), PackedInt32Array(239, 268, 256), PackedInt32Array(183, 270, 178), PackedInt32Array(178, 270, 273), PackedInt32Array(273, 270, 272), PackedInt32Array(272, 270, 268), PackedInt32Array(275, 274, 276), PackedInt32Array(276, 274, 277), PackedInt32Array(277, 274, 178), PackedInt32Array(279, 278, 280), PackedInt32Array(280, 278, 281), PackedInt32Array(280, 281, 178), PackedInt32Array(283, 282, 284), PackedInt32Array(284, 282, 285), PackedInt32Array(285, 282, 178), PackedInt32Array(177, 180, 274), PackedInt32Array(274, 180, 178), PackedInt32Array(178, 282, 280), PackedInt32Array(276, 281, 278), PackedInt32Array(281, 286, 178), PackedInt32Array(178, 286, 277), PackedInt32Array(277, 286, 276), PackedInt32Array(276, 286, 281), PackedInt32Array(272, 284, 273), PackedInt32Array(273, 284, 285), PackedInt32Array(273, 285, 178), PackedInt32Array(269, 264, 287), PackedInt32Array(290, 289, 288), PackedInt32Array(292, 269, 294), PackedInt32Array(294, 269, 287), PackedInt32Array(294, 287, 291), PackedInt32Array(294, 291, 293), PackedInt32Array(296, 295, 290), PackedInt32Array(288, 298, 292), PackedInt32Array(292, 298, 297), PackedInt32Array(292, 299, 288), PackedInt32Array(288, 299, 290), PackedInt32Array(290, 293, 296), PackedInt32Array(293, 299, 294), PackedInt32Array(294, 299, 292), PackedInt32Array(299, 293, 290), PackedInt32Array(256, 271, 300), PackedInt32Array(300, 271, 301), PackedInt32Array(301, 271, 292), PackedInt32Array(292, 271, 269), PackedInt32Array(304, 303, 302), PackedInt32Array(307, 306, 305), PackedInt32Array(309, 308, 310), PackedInt32Array(310, 308, 297), PackedInt32Array(312, 311, 307), PackedInt32Array(314, 313, 304), PackedInt32Array(305, 312, 307), PackedInt32Array(305, 314, 312), PackedInt32Array(312, 314, 297), PackedInt32Array(297, 308, 312), PackedInt32Array(302, 314, 304), PackedInt32Array(315, 300, 302), PackedInt32Array(302, 300, 301), PackedInt32Array(302, 301, 314), PackedInt32Array(314, 301, 297), PackedInt32Array(297, 301, 292), PackedInt32Array(318, 317, 316), PackedInt32Array(298, 320, 319), PackedInt32Array(316, 310, 297), PackedInt32Array(318, 316, 297), PackedInt32Array(322, 321, 318), PackedInt32Array(323, 322, 324), PackedInt32Array(324, 322, 325), PackedInt32Array(318, 326, 322), PackedInt32Array(322, 326, 325), PackedInt32Array(325, 298, 319), PackedInt32Array(298, 326, 297), PackedInt32Array(297, 326, 318), PackedInt32Array(326, 298, 325), PackedInt32Array(325, 327, 324), PackedInt32Array(329, 328, 330), PackedInt32Array(330, 328, 331), PackedInt32Array(334, 333, 332), PackedInt32Array(335, 330, 336), PackedInt32Array(336, 330, 331), PackedInt32Array(319, 339, 325), PackedInt32Array(325, 331, 338), PackedInt32Array(338, 334, 332), PackedInt32Array(334, 338, 331), PackedInt32Array(331, 339, 337), PackedInt32Array(337, 339, 319), PackedInt32Array(339, 331, 325), PackedInt32Array(331, 328, 334), PackedInt32Array(342, 341, 340), PackedInt32Array(344, 343, 342), PackedInt32Array(346, 345, 344), PackedInt32Array(337, 347, 346), PackedInt32Array(340, 344, 342), PackedInt32Array(346, 344, 340), PackedInt32Array(349, 348, 350), PackedInt32Array(350, 348, 351), PackedInt32Array(337, 352, 331), PackedInt32Array(331, 353, 348), PackedInt32Array(348, 353, 351), PackedInt32Array(351, 352, 337), PackedInt32Array(352, 353, 331), PackedInt32Array(353, 352, 351), PackedInt32Array(346, 340, 337), PackedInt32Array(337, 340, 351), PackedInt32Array(332, 327, 338), PackedInt32Array(338, 327, 325), PackedInt32Array(355, 354, 356), PackedInt32Array(356, 354, 359), PackedInt32Array(359, 354, 358), PackedInt32Array(359, 358, 357), PackedInt32Array(363, 364, 331), PackedInt32Array(331, 364, 336), PackedInt32Array(336, 364, 335), PackedInt32Array(335, 364, 360), PackedInt32Array(360, 363, 361), PackedInt32Array(361, 363, 362), PackedInt32Array(363, 360, 364), PackedInt32Array(367, 366, 365), PackedInt32Array(369, 370, 331), PackedInt32Array(331, 370, 363), PackedInt32Array(363, 368, 362), PackedInt32Array(362, 358, 354), PackedInt32Array(358, 368, 357), PackedInt32Array(368, 370, 365), PackedInt32Array(365, 370, 367), PackedInt32Array(367, 370, 369), PackedInt32Array(370, 368, 363), PackedInt32Array(368, 358, 362), PackedInt32Array(356, 359, 371), PackedInt32Array(371, 359, 372), PackedInt32Array(372, 359, 357), PackedInt32Array(367, 369, 348), PackedInt32Array(348, 369, 331), PackedInt32Array(375, 374, 373), PackedInt32Array(373, 377, 376), PackedInt32Array(373, 380, 375), PackedInt32Array(375, 380, 357), PackedInt32Array(357, 380, 378), PackedInt32Array(378, 379, 376), PackedInt32Array(376, 379, 373), PackedInt32Array(373, 379, 380), PackedInt32Array(380, 379, 378), PackedInt32Array(365, 375, 368), PackedInt32Array(368, 375, 357), PackedInt32Array(383, 382, 381), PackedInt32Array(386, 385, 384), PackedInt32Array(389, 388, 387), PackedInt32Array(392, 391, 390), PackedInt32Array(395, 394, 393), PackedInt32Array(381, 396, 395), PackedInt32Array(399, 398, 397), PackedInt32Array(384, 400, 399), PackedInt32Array(402, 401, 403), PackedInt32Array(403, 401, 404), PackedInt32Array(393, 405, 392), PackedInt32Array(407, 406, 389), PackedInt32Array(383, 381, 395), PackedInt32Array(386, 384, 399), PackedInt32Array(397, 409, 408), PackedInt32Array(410, 401, 411), PackedInt32Array(390, 413, 412), PackedInt32Array(389, 387, 407), PackedInt32Array(407, 387, 415), PackedInt32Array(415, 387, 414), PackedInt32Array(415, 414, 397), PackedInt32Array(383, 395, 408), PackedInt32Array(408, 395, 393), PackedInt32Array(408, 393, 392), PackedInt32Array(386, 399, 414), PackedInt32Array(414, 399, 397), PackedInt32Array(387, 416, 414), PackedInt32Array(404, 401, 417), PackedInt32Array(417, 401, 410), PackedInt32Array(390, 412, 392), PackedInt32Array(392, 412, 418), PackedInt32Array(392, 418, 408), PackedInt32Array(408, 418, 397), PackedInt32Array(419, 427, 412), PackedInt32Array(412, 427, 420), PackedInt32Array(420, 427, 421), PackedInt32Array(421, 427, 426), PackedInt32Array(421, 426, 422), PackedInt32Array(422, 426, 425), PackedInt32Array(422, 425, 423), PackedInt32Array(423, 425, 424), PackedInt32Array(423, 424, 404), PackedInt32Array(397, 429, 415), PackedInt32Array(415, 429, 407), PackedInt32Array(407, 429, 428), PackedInt32Array(428, 429, 376), PackedInt32Array(357, 430, 372), PackedInt32Array(372, 430, 371), PackedInt32Array(371, 430, 410), PackedInt32Array(429, 444, 376), PackedInt32Array(376, 444, 378), PackedInt32Array(378, 434, 357), PackedInt32Array(357, 434, 430), PackedInt32Array(430, 431, 410), PackedInt32Array(410, 442, 417), PackedInt32Array(417, 443, 404), PackedInt32Array(404, 443, 423), PackedInt32Array(423, 437, 422), PackedInt32Array(422, 432, 421), PackedInt32Array(421, 436, 420), PackedInt32Array(420, 436, 412), PackedInt32Array(412, 436, 418), PackedInt32Array(418, 435, 397), PackedInt32Array(397, 439, 429), PackedInt32Array(429, 440, 444), PackedInt32Array(444, 440, 378), PackedInt32Array(378, 440, 434), PackedInt32Array(434, 431, 430), PackedInt32Array(431, 442, 410), PackedInt32Array(442, 443, 417), PackedInt32Array(443, 441, 423), PackedInt32Array(437, 432, 422), PackedInt32Array(423, 433, 437), PackedInt32Array(432, 439, 421), PackedInt32Array(421, 439, 436), PackedInt32Array(436, 435, 418), PackedInt32Array(435, 439, 397), PackedInt32Array(439, 438, 429), PackedInt32Array(429, 438, 440), PackedInt32Array(440, 432, 434), PackedInt32Array(434, 433, 431), PackedInt32Array(431, 433, 442), PackedInt32Array(442, 441, 443), PackedInt32Array(441, 433, 423), PackedInt32Array(437, 434, 432), PackedInt32Array(433, 434, 437), PackedInt32Array(432, 438, 439), PackedInt32Array(439, 435, 436), PackedInt32Array(438, 432, 440), PackedInt32Array(433, 441, 442), PackedInt32Array(447, 446, 445), PackedInt32Array(450, 449, 448), PackedInt32Array(452, 451, 450), PackedInt32Array(454, 453, 455), PackedInt32Array(457, 456, 448), PackedInt32Array(459, 458, 460), PackedInt32Array(462, 461, 463), PackedInt32Array(465, 464, 466), PackedInt32Array(456, 467, 455), PackedInt32Array(458, 468, 452), PackedInt32Array(461, 469, 460), PackedInt32Array(472, 471, 470), PackedInt32Array(475, 474, 473), PackedInt32Array(453, 476, 475), PackedInt32Array(479, 478, 477), PackedInt32Array(481, 480, 479), PackedInt32Array(484, 483, 482), PackedInt32Array(487, 486, 485), PackedInt32Array(490, 489, 488), PackedInt32Array(493, 492, 491), PackedInt32Array(491, 494, 463), PackedInt32Array(464, 496, 495), PackedInt32Array(473, 497, 472), PackedInt32Array(500, 499, 498), PackedInt32Array(482, 502, 501), PackedInt32Array(505, 504, 503), PackedInt32Array(450, 458, 452), PackedInt32Array(455, 453, 456), PackedInt32Array(456, 453, 509), PackedInt32Array(456, 509, 510), PackedInt32Array(510, 509, 508), PackedInt32Array(510, 508, 511), PackedInt32Array(511, 508, 507), PackedInt32Array(511, 507, 512), PackedInt32Array(512, 507, 506), PackedInt32Array(512, 506, 498), PackedInt32Array(461, 460, 458), PackedInt32Array(501, 513, 481), PackedInt32Array(488, 515, 514), PackedInt32Array(517, 516, 518), PackedInt32Array(518, 516, 522), PackedInt32Array(522, 516, 521), PackedInt32Array(522, 521, 523), PackedInt32Array(523, 521, 524), PackedInt32Array(524, 521, 520), PackedInt32Array(524, 520, 525), PackedInt32Array(525, 520, 519), PackedInt32Array(464, 495, 466), PackedInt32Array(466, 495, 528), PackedInt32Array(528, 495, 527), PackedInt32Array(528, 527, 526), PackedInt32Array(448, 529, 450), PackedInt32Array(450, 529, 458), PackedInt32Array(463, 493, 491), PackedInt32Array(485, 530, 447), PackedInt32Array(536, 531, 519), PackedInt32Array(531, 536, 532), PackedInt32Array(532, 534, 533), PackedInt32Array(533, 537, 470), PackedInt32Array(470, 537, 472), PackedInt32Array(472, 537, 473), PackedInt32Array(473, 537, 534), PackedInt32Array(534, 532, 535), PackedInt32Array(535, 532, 536), PackedInt32Array(534, 537, 533), PackedInt32Array(500, 477, 538), PackedInt32Array(482, 501, 484), PackedInt32Array(484, 501, 541), PackedInt32Array(484, 541, 540), PackedInt32Array(484, 540, 539), PackedInt32Array(501, 481, 479), PackedInt32Array(488, 514, 490), PackedInt32Array(490, 514, 487), PackedInt32Array(485, 447, 445), PackedInt32Array(542, 547, 543), PackedInt32Array(543, 547, 470), PackedInt32Array(470, 547, 533), PackedInt32Array(533, 547, 546), PackedInt32Array(533, 546, 545), PackedInt32Array(533, 545, 532), PackedInt32Array(532, 545, 531), PackedInt32Array(531, 545, 544), PackedInt32Array(531, 544, 519), PackedInt32Array(448, 456, 529), PackedInt32Array(529, 456, 510), PackedInt32Array(529, 510, 458), PackedInt32Array(458, 510, 461), PackedInt32Array(461, 510, 511), PackedInt32Array(461, 511, 548), PackedInt32Array(548, 511, 512), PackedInt32Array(548, 512, 549), PackedInt32Array(549, 512, 498), PackedInt32Array(461, 548, 463), PackedInt32Array(463, 548, 493), PackedInt32Array(493, 548, 549), PackedInt32Array(493, 549, 550), PackedInt32Array(550, 549, 498), PackedInt32Array(477, 500, 479), PackedInt32Array(479, 500, 498), PackedInt32Array(479, 498, 501), PackedInt32Array(514, 551, 487), PackedInt32Array(487, 485, 552), PackedInt32Array(552, 485, 445), PackedInt32Array(552, 445, 539), PackedInt32Array(498, 506, 553), PackedInt32Array(553, 506, 554), PackedInt32Array(554, 506, 507), PackedInt32Array(554, 507, 555), PackedInt32Array(555, 507, 508), PackedInt32Array(555, 508, 556), PackedInt32Array(556, 508, 509), PackedInt32Array(556, 509, 557), PackedInt32Array(557, 509, 453), PackedInt32Array(557, 453, 475), PackedInt32Array(503, 558, 518), PackedInt32Array(559, 554, 560), PackedInt32Array(560, 554, 555), PackedInt32Array(560, 555, 561), PackedInt32Array(561, 555, 556), PackedInt32Array(561, 556, 562), PackedInt32Array(562, 556, 557), PackedInt32Array(562, 557, 475), PackedInt32Array(562, 475, 473), PackedInt32Array(519, 567, 564), PackedInt32Array(564, 567, 566), PackedInt32Array(564, 566, 565), PackedInt32Array(565, 566, 490), PackedInt32Array(490, 566, 563), PackedInt32Array(404, 424, 542), PackedInt32Array(542, 424, 547), PackedInt32Array(547, 579, 546), PackedInt32Array(546, 574, 545), PackedInt32Array(545, 575, 544), PackedInt32Array(544, 568, 519), PackedInt32Array(568, 577, 569), PackedInt32Array(569, 571, 570), PackedInt32Array(570, 427, 505), PackedInt32Array(505, 427, 419), PackedInt32Array(427, 581, 426), PackedInt32Array(426, 578, 425), PackedInt32Array(425, 572, 424), PackedInt32Array(424, 572, 547), PackedInt32Array(579, 573, 546), PackedInt32Array(547, 572, 579), PackedInt32Array(574, 576, 545), PackedInt32Array(546, 573, 574), PackedInt32Array(575, 568, 544), PackedInt32Array(545, 576, 575), PackedInt32Array(577, 571, 569), PackedInt32Array(568, 575, 577), PackedInt32Array(571, 581, 570), PackedInt32Array(570, 581, 427), PackedInt32Array(581, 573, 426), PackedInt32Array(578, 580, 425), PackedInt32Array(426, 573, 578), PackedInt32Array(425, 580, 572), PackedInt32Array(579, 580, 573), PackedInt32Array(572, 580, 579), PackedInt32Array(574, 571, 576), PackedInt32Array(573, 581, 574), PackedInt32Array(576, 577, 575), PackedInt32Array(577, 576, 571), PackedInt32Array(571, 574, 581), PackedInt32Array(578, 573, 580), PackedInt32Array(534, 596, 473), PackedInt32Array(473, 596, 562), PackedInt32Array(562, 603, 561), PackedInt32Array(561, 605, 560), PackedInt32Array(560, 606, 559), PackedInt32Array(559, 607, 498), PackedInt32Array(498, 597, 501), PackedInt32Array(501, 597, 541), PackedInt32Array(541, 590, 540), PackedInt32Array(540, 595, 539), PackedInt32Array(539, 595, 582), PackedInt32Array(582, 585, 490), PackedInt32Array(490, 585, 565), PackedInt32Array(565, 591, 564), PackedInt32Array(564, 599, 519), PackedInt32Array(519, 599, 536), PackedInt32Array(536, 598, 535), PackedInt32Array(535, 609, 534), PackedInt32Array(534, 608, 596), PackedInt32Array(596, 586, 562), PackedInt32Array(603, 605, 561), PackedInt32Array(562, 586, 603), PackedInt32Array(605, 606, 560), PackedInt32Array(606, 607, 559), PackedInt32Array(607, 589, 498), PackedInt32Array(498, 589, 597), PackedInt32Array(597, 590, 541), PackedInt32Array(590, 611, 540), PackedInt32Array(540, 611, 595), PackedInt32Array(595, 585, 582), PackedInt32Array(585, 612, 565), PackedInt32Array(591, 599, 564), PackedInt32Array(565, 593, 591), PackedInt32Array(599, 598, 536), PackedInt32Array(598, 583, 535), PackedInt32Array(609, 608, 534), PackedInt32Array(535, 594, 609), PackedInt32Array(608, 588, 596), PackedInt32Array(596, 610, 586), PackedInt32Array(603, 586, 605), PackedInt32Array(605, 587, 606), PackedInt32Array(606, 589, 607), PackedInt32Array(589, 590, 597), PackedInt32Array(590, 612, 611), PackedInt32Array(611, 585, 595), PackedInt32Array(612, 593, 565), PackedInt32Array(585, 611, 612), PackedInt32Array(591, 598, 599), PackedInt32Array(593, 592, 591), PackedInt32Array(583, 594, 535), PackedInt32Array(598, 591, 583), PackedInt32Array(609, 594, 608), PackedInt32Array(588, 610, 596), PackedInt32Array(608, 594, 588), PackedInt32Array(610, 604, 586), PackedInt32Array(586, 604, 605), PackedInt32Array(587, 589, 606), PackedInt32Array(605, 604, 587), PackedInt32Array(589, 584, 590), PackedInt32Array(590, 584, 612), PackedInt32Array(612, 584, 593), PackedInt32Array(592, 583, 591), PackedInt32Array(593, 600, 592), PackedInt32Array(583, 602, 594), PackedInt32Array(588, 604, 610), PackedInt32Array(594, 602, 588), PackedInt32Array(587, 601, 589), PackedInt32Array(604, 588, 587), PackedInt32Array(589, 601, 584), PackedInt32Array(584, 600, 593), PackedInt32Array(592, 600, 583), PackedInt32Array(583, 600, 602), PackedInt32Array(602, 587, 588), PackedInt32Array(587, 602, 601), PackedInt32Array(601, 600, 584), PackedInt32Array(600, 601, 602), PackedInt32Array(539, 615, 484), PackedInt32Array(484, 614, 526), PackedInt32Array(526, 613, 528), PackedInt32Array(528, 615, 466), PackedInt32Array(466, 615, 539), PackedInt32Array(615, 614, 484), PackedInt32Array(614, 613, 526), PackedInt32Array(613, 615, 528), PackedInt32Array(615, 613, 614), PackedInt32Array(568, 525, 519), PackedInt32Array(525, 568, 524), PackedInt32Array(524, 569, 523), PackedInt32Array(523, 570, 522), PackedInt32Array(522, 616, 518), PackedInt32Array(518, 616, 503), PackedInt32Array(503, 616, 505), PackedInt32Array(505, 616, 570), PackedInt32Array(570, 523, 569), PackedInt32Array(569, 524, 568), PackedInt32Array(570, 616, 522), PackedInt32Array(539, 582, 552), PackedInt32Array(552, 582, 487), PackedInt32Array(487, 582, 490), PackedInt32Array(619, 618, 617), PackedInt32Array(622, 621, 620), PackedInt32Array(624, 623, 622), PackedInt32Array(626, 625, 624), PackedInt32Array(628, 627, 626), PackedInt32Array(630, 629, 631), PackedInt32Array(631, 629, 635), PackedInt32Array(631, 635, 636), PackedInt32Array(636, 635, 637), PackedInt32Array(637, 635, 634), PackedInt32Array(637, 634, 638), PackedInt32Array(638, 634, 633), PackedInt32Array(638, 633, 639), PackedInt32Array(640, 631, 641), PackedInt32Array(641, 631, 642), PackedInt32Array(642, 631, 636), PackedInt32Array(642, 636, 637), PackedInt32Array(642, 637, 638), PackedInt32Array(642, 638, 643), PackedInt32Array(643, 638, 639), PackedInt32Array(643, 639, 519), PackedInt32Array(644, 617, 645), PackedInt32Array(620, 647, 646), PackedInt32Array(622, 620, 646), PackedInt32Array(649, 648, 646), PackedInt32Array(646, 648, 619), PackedInt32Array(628, 657, 651), PackedInt32Array(651, 657, 652), PackedInt32Array(652, 658, 653), PackedInt32Array(653, 629, 650), PackedInt32Array(629, 653, 635), PackedInt32Array(635, 658, 634), PackedInt32Array(634, 656, 633), PackedInt32Array(633, 656, 632), PackedInt32Array(632, 654, 519), PackedInt32Array(654, 656, 655), PackedInt32Array(655, 657, 628), PackedInt32Array(657, 659, 652), PackedInt32Array(658, 635, 653), PackedInt32Array(652, 659, 658), PackedInt32Array(658, 659, 634), PackedInt32Array(634, 659, 656), PackedInt32Array(656, 654, 632), PackedInt32Array(656, 657, 655), PackedInt32Array(657, 656, 659), PackedInt32Array(624, 622, 646), PackedInt32Array(646, 619, 617), PackedInt32Array(626, 624, 646), PackedInt32Array(519, 654, 660), PackedInt32Array(660, 654, 655), PackedInt32Array(660, 655, 661), PackedInt32Array(661, 655, 644), PackedInt32Array(644, 655, 617), PackedInt32Array(617, 655, 646), PackedInt32Array(646, 655, 626), PackedInt32Array(626, 655, 628), PackedInt32Array(641, 642, 516), PackedInt32Array(516, 642, 521), PackedInt32Array(521, 642, 520), PackedInt32Array(520, 642, 643), PackedInt32Array(520, 643, 519), PackedInt32Array(662, 664, 663), PackedInt32Array(665, 667, 666), PackedInt32Array(667, 669, 668), PackedInt32Array(669, 671, 670), PackedInt32Array(673, 672, 674), PackedInt32Array(676, 675, 677), PackedInt32Array(678, 664, 679), PackedInt32Array(680, 671, 681), PackedInt32Array(683, 682, 684), PackedInt32Array(684, 682, 685), PackedInt32Array(662, 686, 677), PackedInt32Array(665, 687, 679), PackedInt32Array(690, 689, 688), PackedInt32Array(693, 692, 691), PackedInt32Array(696, 695, 694), PackedInt32Array(699, 698, 697), PackedInt32Array(701, 700, 699), PackedInt32Array(682, 702, 701), PackedInt32Array(705, 704, 703), PackedInt32Array(707, 706, 705), PackedInt32Array(688, 709, 708), PackedInt32Array(711, 710, 712), PackedInt32Array(712, 710, 713), PackedInt32Array(713, 710, 705), PackedInt32Array(672, 714, 651), PackedInt32Array(716, 715, 681), PackedInt32Array(718, 717, 674), PackedInt32Array(691, 719, 690), PackedInt32Array(694, 720, 693), PackedInt32Array(664, 662, 677), PackedInt32Array(679, 664, 665), PackedInt32Array(665, 664, 677), PackedInt32Array(703, 721, 685), PackedInt32Array(723, 722, 708), PackedInt32Array(708, 722, 724), PackedInt32Array(726, 725, 707), PackedInt32Array(728, 727, 726), PackedInt32Array(674, 672, 651), PackedInt32Array(716, 681, 671), PackedInt32Array(716, 665, 729), PackedInt32Array(729, 665, 677), PackedInt32Array(688, 708, 690), PackedInt32Array(690, 708, 691), PackedInt32Array(691, 708, 724), PackedInt32Array(691, 724, 730), PackedInt32Array(685, 682, 701), PackedInt32Array(675, 731, 696), PackedInt32Array(729, 732, 716), PackedInt32Array(693, 691, 694), PackedInt32Array(694, 691, 675), PackedInt32Array(675, 691, 730), PackedInt32Array(675, 730, 718), PackedInt32Array(716, 671, 669), PackedInt32Array(703, 685, 705), PackedInt32Array(705, 685, 699), PackedInt32Array(705, 699, 697), PackedInt32Array(705, 697, 729), PackedInt32Array(724, 733, 730), PackedInt32Array(650, 734, 711), PackedInt32Array(726, 707, 705), PackedInt32Array(650, 711, 735), PackedInt32Array(735, 711, 712), PackedInt32Array(735, 712, 713), PackedInt32Array(735, 713, 705), PackedInt32Array(685, 701, 699), PackedInt32Array(716, 669, 667), PackedInt32Array(675, 696, 694), PackedInt32Array(675, 718, 674), PackedInt32Array(710, 736, 728), PackedInt32Array(711, 737, 710), PackedInt32Array(716, 667, 665), PackedInt32Array(729, 677, 675), PackedInt32Array(726, 705, 728), PackedInt32Array(728, 705, 710), PackedInt32Array(735, 653, 650), PackedInt32Array(653, 738, 652), PackedInt32Array(652, 674, 651), PackedInt32Array(674, 652, 675), PackedInt32Array(675, 652, 729), PackedInt32Array(729, 652, 705), PackedInt32Array(705, 652, 735), PackedInt32Array(735, 738, 653), PackedInt32Array(738, 735, 652), PackedInt32Array(739, 729, 740), PackedInt32Array(740, 729, 697), PackedInt32Array(743, 742, 741), PackedInt32Array(746, 745, 744), PackedInt32Array(749, 748, 747), PackedInt32Array(752, 751, 750), PackedInt32Array(754, 753, 752), PackedInt32Array(756, 755, 754), PackedInt32Array(759, 758, 757), PackedInt32Array(761, 760, 759), PackedInt32Array(764, 763, 762), PackedInt32Array(767, 766, 765), PackedInt32Array(769, 768, 770), PackedInt32Array(772, 771, 773), PackedInt32Array(775, 774, 750), PackedInt32Array(750, 774, 780), PackedInt32Array(780, 774, 779), PackedInt32Array(780, 779, 778), PackedInt32Array(780, 778, 781), PackedInt32Array(781, 778, 777), PackedInt32Array(781, 777, 776), PackedInt32Array(783, 782, 757), PackedInt32Array(785, 784, 762), PackedInt32Array(787, 786, 765), PackedInt32Array(789, 788, 790), PackedInt32Array(790, 788, 794), PackedInt32Array(794, 788, 793), PackedInt32Array(794, 793, 791), PackedInt32Array(791, 793, 792), PackedInt32Array(768, 796, 795), PackedInt32Array(771, 797, 770), PackedInt32Array(799, 798, 773), PackedInt32Array(782, 800, 756), PackedInt32Array(784, 801, 761), PackedInt32Array(803, 802, 746), PackedInt32Array(805, 804, 803), PackedInt32Array(807, 806, 805), PackedInt32Array(747, 809, 808), PackedInt32Array(795, 811, 810), PackedInt32Array(774, 812, 799), PackedInt32Array(815, 814, 813), PackedInt32Array(786, 817, 816), PackedInt32Array(816, 818, 815), PackedInt32Array(813, 819, 764), PackedInt32Array(821, 820, 767), PackedInt32Array(822, 791, 823), PackedInt32Array(823, 791, 792), PackedInt32Array(825, 824, 776), PackedInt32Array(788, 826, 821), PackedInt32Array(744, 803, 746), PackedInt32Array(749, 747, 808), PackedInt32Array(829, 828, 827), PackedInt32Array(741, 831, 830), PackedInt32Array(834, 833, 832), PackedInt32Array(770, 768, 795), PackedInt32Array(771, 770, 773), PackedInt32Array(773, 770, 799), PackedInt32Array(757, 782, 756), PackedInt32Array(762, 784, 761), PackedInt32Array(821, 767, 765), PackedInt32Array(830, 836, 835), PackedInt32Array(838, 837, 839), PackedInt32Array(839, 837, 832), PackedInt32Array(743, 741, 830), PackedInt32Array(815, 813, 816), PackedInt32Array(816, 813, 786), PackedInt32Array(840, 810, 841), PackedInt32Array(744, 834, 803), PackedInt32Array(803, 834, 805), PackedInt32Array(756, 759, 757), PackedInt32Array(761, 764, 762), PackedInt32Array(752, 750, 842), PackedInt32Array(842, 750, 780), PackedInt32Array(842, 780, 843), PackedInt32Array(843, 780, 781), PackedInt32Array(843, 781, 844), PackedInt32Array(844, 781, 776), PackedInt32Array(808, 807, 848), PackedInt32Array(848, 807, 847), PackedInt32Array(848, 847, 849), PackedInt32Array(849, 847, 846), PackedInt32Array(849, 846, 845), PackedInt32Array(849, 845, 756), PackedInt32Array(829, 835, 850), PackedInt32Array(770, 795, 810), PackedInt32Array(821, 765, 786), PackedInt32Array(807, 805, 851), PackedInt32Array(851, 805, 852), PackedInt32Array(852, 805, 834), PackedInt32Array(852, 834, 837), PackedInt32Array(852, 837, 743), PackedInt32Array(852, 743, 830), PackedInt32Array(749, 808, 776), PackedInt32Array(776, 808, 848), PackedInt32Array(776, 848, 853), PackedInt32Array(853, 848, 849), PackedInt32Array(853, 849, 854), PackedInt32Array(854, 849, 754), PackedInt32Array(754, 849, 756), PackedInt32Array(756, 761, 759), PackedInt32Array(776, 853, 844), PackedInt32Array(844, 853, 843), PackedInt32Array(843, 853, 854), PackedInt32Array(843, 854, 842), PackedInt32Array(842, 854, 752), PackedInt32Array(752, 854, 754), PackedInt32Array(861, 875, 855), PackedInt32Array(855, 889, 856), PackedInt32Array(856, 870, 827), PackedInt32Array(827, 870, 857), PackedInt32Array(857, 864, 830), PackedInt32Array(830, 886, 852), PackedInt32Array(852, 868, 851), PackedInt32Array(851, 868, 807), PackedInt32Array(807, 873, 847), PackedInt32Array(847, 876, 846), PackedInt32Array(846, 878, 845), PackedInt32Array(845, 877, 756), PackedInt32Array(756, 877, 858), PackedInt32Array(858, 865, 859), PackedInt32Array(859, 872, 860), PackedInt32Array(860, 883, 788), PackedInt32Array(788, 875, 861), PackedInt32Array(875, 889, 855), PackedInt32Array(889, 867, 856), PackedInt32Array(856, 882, 870), PackedInt32Array(870, 864, 857), PackedInt32Array(864, 869, 830), PackedInt32Array(886, 884, 852), PackedInt32Array(830, 885, 886), PackedInt32Array(852, 884, 868), PackedInt32Array(868, 873, 807), PackedInt32Array(873, 862, 847), PackedInt32Array(876, 878, 846), PackedInt32Array(847, 862, 876), PackedInt32Array(878, 877, 845), PackedInt32Array(877, 879, 858), PackedInt32Array(865, 872, 859), PackedInt32Array(858, 879, 865), PackedInt32Array(872, 883, 860), PackedInt32Array(883, 874, 788), PackedInt32Array(788, 874, 875), PackedInt32Array(875, 888, 889), PackedInt32Array(867, 881, 856), PackedInt32Array(889, 880, 867), PackedInt32Array(882, 864, 870), PackedInt32Array(856, 881, 882), PackedInt32Array(869, 885, 830), PackedInt32Array(864, 866, 869), PackedInt32Array(886, 885, 884), PackedInt32Array(884, 871, 868), PackedInt32Array(868, 862, 873), PackedInt32Array(876, 880, 878), PackedInt32Array(862, 867, 876), PackedInt32Array(878, 880, 877), PackedInt32Array(877, 880, 879), PackedInt32Array(865, 888, 872), PackedInt32Array(879, 887, 865), PackedInt32Array(872, 888, 883), PackedInt32Array(883, 888, 874), PackedInt32Array(874, 888, 875), PackedInt32Array(888, 863, 889), PackedInt32Array(867, 871, 881), PackedInt32Array(880, 876, 867), PackedInt32Array(889, 887, 880), PackedInt32Array(882, 866, 864), PackedInt32Array(881, 866, 882), PackedInt32Array(869, 884, 885), PackedInt32Array(866, 871, 869), PackedInt32Array(871, 862, 868), PackedInt32Array(884, 869, 871), PackedInt32Array(862, 871, 867), PackedInt32Array(880, 887, 879), PackedInt32Array(865, 863, 888), PackedInt32Array(887, 863, 865), PackedInt32Array(863, 887, 889), PackedInt32Array(871, 866, 881), PackedInt32Array(799, 770, 774), PackedInt32Array(813, 764, 761), PackedInt32Array(840, 890, 825), PackedInt32Array(832, 837, 834), PackedInt32Array(821, 786, 788), PackedInt32Array(788, 786, 860), PackedInt32Array(860, 786, 859), PackedInt32Array(859, 786, 813), PackedInt32Array(859, 813, 858), PackedInt32Array(858, 813, 761), PackedInt32Array(858, 761, 756), PackedInt32Array(788, 861, 793), PackedInt32Array(793, 861, 792), PackedInt32Array(792, 861, 855), PackedInt32Array(835, 829, 830), PackedInt32Array(830, 829, 857), PackedInt32Array(857, 829, 827), PackedInt32Array(776, 777, 825), PackedInt32Array(825, 891, 840), PackedInt32Array(840, 891, 810), PackedInt32Array(810, 893, 770), PackedInt32Array(770, 892, 774), PackedInt32Array(774, 892, 779), PackedInt32Array(779, 891, 778), PackedInt32Array(778, 891, 777), PackedInt32Array(777, 891, 825), PackedInt32Array(891, 893, 810), PackedInt32Array(893, 779, 770), PackedInt32Array(770, 779, 892), PackedInt32Array(779, 893, 891), PackedInt32Array(894, 790, 895), PackedInt32Array(895, 790, 794), PackedInt32Array(895, 794, 791), PackedInt32Array(896, 563, 897), PackedInt32Array(897, 563, 898), PackedInt32Array(898, 563, 566), PackedInt32Array(898, 566, 899), PackedInt32Array(899, 566, 567), PackedInt32Array(899, 567, 519), PackedInt32Array(519, 660, 899), PackedInt32Array(899, 660, 898), PackedInt32Array(898, 660, 661), PackedInt32Array(898, 661, 897), PackedInt32Array(897, 661, 644), PackedInt32Array(903, 907, 904), PackedInt32Array(904, 907, 905), PackedInt32Array(905, 907, 900), PackedInt32Array(900, 902, 901), PackedInt32Array(902, 900, 906), PackedInt32Array(906, 907, 526), PackedInt32Array(526, 907, 903), PackedInt32Array(907, 906, 900), PackedInt32Array(904, 908, 903), PackedInt32Array(902, 906, 495), PackedInt32Array(495, 906, 527), PackedInt32Array(527, 906, 526), PackedInt32Array(911, 910, 909), PackedInt32Array(914, 913, 912), PackedInt32Array(916, 915, 904), PackedInt32Array(917, 916, 918), PackedInt32Array(918, 916, 919), PackedInt32Array(909, 921, 920), PackedInt32Array(924, 926, 925), PackedInt32Array(925, 926, 923), PackedInt32Array(925, 923, 922), PackedInt32Array(925, 922, 911), PackedInt32Array(929, 926, 924), PackedInt32Array(926, 931, 923), PackedInt32Array(923, 931, 927), PackedInt32Array(927, 931, 928), PackedInt32Array(928, 931, 930), PackedInt32Array(930, 932, 919), PackedInt32Array(919, 932, 929), PackedInt32Array(929, 932, 926), PackedInt32Array(926, 932, 931), PackedInt32Array(931, 932, 930), PackedInt32Array(924, 933, 929), PackedInt32Array(912, 934, 924), PackedInt32Array(935, 914, 936), PackedInt32Array(936, 914, 937), PackedInt32Array(937, 914, 920), PackedInt32Array(928, 938, 900), PackedInt32Array(900, 938, 905), PackedInt32Array(905, 939, 904), PackedInt32Array(904, 939, 916), PackedInt32Array(916, 939, 919), PackedInt32Array(919, 939, 930), PackedInt32Array(930, 938, 928), PackedInt32Array(938, 939, 905), PackedInt32Array(939, 938, 930), PackedInt32Array(929, 940, 919), PackedInt32Array(936, 937, 943), PackedInt32Array(943, 937, 944), PackedInt32Array(944, 937, 941), PackedInt32Array(941, 937, 942), PackedInt32Array(942, 937, 920), PackedInt32Array(924, 925, 912), PackedInt32Array(912, 945, 914), PackedInt32Array(914, 945, 920), PackedInt32Array(920, 945, 909), PackedInt32Array(909, 945, 911), PackedInt32Array(911, 945, 925), PackedInt32Array(925, 945, 912), PackedInt32Array(947, 946, 948), PackedInt32Array(948, 946, 951), PackedInt32Array(948, 951, 952), PackedInt32Array(952, 951, 950), PackedInt32Array(952, 950, 949), PackedInt32Array(953, 855, 949), PackedInt32Array(949, 855, 952), PackedInt32Array(952, 855, 856), PackedInt32Array(952, 856, 948), PackedInt32Array(948, 856, 827), PackedInt32Array(956, 962, 957), PackedInt32Array(957, 962, 958), PackedInt32Array(958, 962, 959), PackedInt32Array(959, 961, 960), PackedInt32Array(960, 951, 954), PackedInt32Array(954, 946, 955), PackedInt32Array(946, 954, 951), PackedInt32Array(951, 960, 950), PackedInt32Array(950, 963, 949), PackedInt32Array(949, 962, 956), PackedInt32Array(962, 961, 959), PackedInt32Array(961, 963, 960), PackedInt32Array(960, 963, 950), PackedInt32Array(963, 962, 949), PackedInt32Array(962, 963, 961), PackedInt32Array(965, 964, 966), PackedInt32Array(966, 964, 970), PackedInt32Array(970, 964, 971), PackedInt32Array(971, 964, 969), PackedInt32Array(971, 969, 972), PackedInt32Array(972, 969, 968), PackedInt32Array(972, 968, 967), PackedInt32Array(972, 967, 973), PackedInt32Array(973, 967, 957), PackedInt32Array(974, 966, 954), PackedInt32Array(954, 966, 970), PackedInt32Array(954, 970, 960), PackedInt32Array(960, 970, 971), PackedInt32Array(960, 971, 972), PackedInt32Array(960, 972, 959), PackedInt32Array(959, 972, 958), PackedInt32Array(958, 972, 973), PackedInt32Array(958, 973, 957), PackedInt32Array(957, 975, 956), PackedInt32Array(967, 978, 957), PackedInt32Array(978, 967, 979), PackedInt32Array(979, 968, 980), PackedInt32Array(980, 982, 976), PackedInt32Array(976, 964, 977), PackedInt32Array(964, 982, 969), PackedInt32Array(969, 980, 968), PackedInt32Array(968, 979, 967), PackedInt32Array(982, 981, 976), PackedInt32Array(980, 969, 982), PackedInt32Array(976, 981, 964), PackedInt32Array(964, 981, 982), PackedInt32Array(983, 985, 984), PackedInt32Array(984, 985, 949), PackedInt32Array(956, 984, 949), PackedInt32Array(957, 978, 987), PackedInt32Array(987, 978, 979), PackedInt32Array(987, 979, 988), PackedInt32Array(988, 979, 980), PackedInt32Array(988, 980, 989), PackedInt32Array(989, 980, 976), PackedInt32Array(989, 976, 986), PackedInt32Array(992, 991, 990), PackedInt32Array(990, 993, 992), PackedInt32Array(995, 994, 986), PackedInt32Array(986, 994, 999), PackedInt32Array(986, 999, 998), PackedInt32Array(986, 998, 989), PackedInt32Array(989, 998, 997), PackedInt32Array(989, 997, 988), PackedInt32Array(988, 997, 996), PackedInt32Array(988, 996, 987), PackedInt32Array(987, 996, 957), PackedInt32Array(1001, 993, 1000), PackedInt32Array(1000, 993, 990), PackedInt32Array(1013, 1009, 1014), PackedInt32Array(1014, 1009, 1008), PackedInt32Array(1014, 1008, 1015), PackedInt32Array(1015, 1008, 1007), PackedInt32Array(1015, 1007, 1016), PackedInt32Array(1016, 1007, 1006), PackedInt32Array(1016, 1006, 1005), PackedInt32Array(1016, 1005, 1017), PackedInt32Array(1017, 1005, 1004), PackedInt32Array(1017, 1004, 1003), PackedInt32Array(1018, 1020, 1000), PackedInt32Array(1000, 1020, 1001), PackedInt32Array(1001, 1020, 1019), PackedInt32Array(1019, 1020, 1002), PackedInt32Array(1020, 1011, 1002), PackedInt32Array(1011, 1022, 1010), PackedInt32Array(1010, 1026, 1009), PackedInt32Array(1009, 1024, 1008), PackedInt32Array(1008, 998, 1007), PackedInt32Array(1007, 999, 1006), PackedInt32Array(1006, 999, 1005), PackedInt32Array(1005, 994, 1004), PackedInt32Array(1004, 994, 1021), PackedInt32Array(994, 1005, 999), PackedInt32Array(999, 1007, 998), PackedInt32Array(998, 1024, 997), PackedInt32Array(997, 1025, 996), PackedInt32Array(996, 1022, 957), PackedInt32Array(957, 1022, 1018), PackedInt32Array(1018, 1022, 1020), PackedInt32Array(1020, 1022, 1011), PackedInt32Array(1022, 996, 1010), PackedInt32Array(1026, 1025, 1009), PackedInt32Array(1010, 996, 1026), PackedInt32Array(1024, 998, 1008), PackedInt32Array(1009, 1023, 1024), PackedInt32Array(1024, 1023, 997), PackedInt32Array(1025, 1026, 996), PackedInt32Array(997, 1023, 1025), PackedInt32Array(1025, 1023, 1009), PackedInt32Array(1028, 1027, 1029), PackedInt32Array(1029, 1027, 1032), PackedInt32Array(1029, 1032, 1033), PackedInt32Array(1033, 1032, 1031), PackedInt32Array(1033, 1031, 1030), PackedInt32Array(1029, 1035, 1034), PackedInt32Array(1038, 1037, 1036), PackedInt32Array(1027, 1039, 1038), PackedInt32Array(1040, 1036, 1041), PackedInt32Array(1044, 1043, 1042), PackedInt32Array(1042, 1045, 1044), PackedInt32Array(1044, 1045, 1030), PackedInt32Array(1030, 1045, 1046), PackedInt32Array(1030, 1046, 1033), PackedInt32Array(1033, 1046, 1029), PackedInt32Array(1029, 1046, 1035), PackedInt32Array(1047, 1035, 1048), PackedInt32Array(1048, 1035, 1046), PackedInt32Array(1048, 1046, 1045), PackedInt32Array(1038, 1036, 1040), PackedInt32Array(1049, 1051, 1050), PackedInt32Array(1051, 1052, 1040), PackedInt32Array(1040, 1053, 1038), PackedInt32Array(1038, 1032, 1027), PackedInt32Array(1032, 1053, 1031), PackedInt32Array(1031, 1052, 1030), PackedInt32Array(1030, 1052, 1049), PackedInt32Array(1049, 1052, 1051), PackedInt32Array(1052, 1053, 1040), PackedInt32Array(1053, 1032, 1038), PackedInt32Array(1053, 1052, 1031), PackedInt32Array(941, 1050, 944), PackedInt32Array(944, 1050, 1051), PackedInt32Array(944, 1051, 943), PackedInt32Array(943, 1051, 1040), PackedInt32Array(1056, 1064, 1057), PackedInt32Array(1057, 1064, 1058), PackedInt32Array(1058, 1013, 1059), PackedInt32Array(1059, 1014, 1060), PackedInt32Array(1060, 1016, 1061), PackedInt32Array(1061, 1017, 1062), PackedInt32Array(1062, 1003, 1063), PackedInt32Array(1063, 1003, 1054), PackedInt32Array(1054, 1003, 1055), PackedInt32Array(1003, 1062, 1017), PackedInt32Array(1017, 1061, 1016), PackedInt32Array(1016, 1060, 1015), PackedInt32Array(1015, 1060, 1014), PackedInt32Array(1014, 1059, 1013), PackedInt32Array(1013, 1064, 1012), PackedInt32Array(1012, 1064, 1002), PackedInt32Array(1002, 1064, 1056), PackedInt32Array(1064, 1013, 1058), PackedInt32Array(1065, 1071, 1054), PackedInt32Array(1054, 1071, 1063), PackedInt32Array(1063, 1072, 1062), PackedInt32Array(1062, 1070, 1061), PackedInt32Array(1061, 1069, 1060), PackedInt32Array(1060, 1067, 1059), PackedInt32Array(1059, 1066, 1058), PackedInt32Array(1058, 1066, 1057), PackedInt32Array(1066, 1059, 1067), PackedInt32Array(1067, 1060, 1068), PackedInt32Array(1068, 1060, 1069), PackedInt32Array(1069, 1061, 1070), PackedInt32Array(1070, 1072, 1071), PackedInt32Array(1071, 1072, 1063), PackedInt32Array(1072, 1070, 1062), PackedInt32Array(1075, 1074, 1073), PackedInt32Array(1076, 1078, 1077), PackedInt32Array(1079, 1081, 1080), PackedInt32Array(1082, 1084, 1083), PackedInt32Array(1084, 1086, 1085), PackedInt32Array(1086, 1088, 1087), PackedInt32Array(1088, 1090, 1089), PackedInt32Array(1091, 1093, 1092), PackedInt32Array(1094, 1096, 1095), PackedInt32Array(1098, 1097, 1099), PackedInt32Array(1099, 1097, 1103), PackedInt32Array(1103, 1097, 1102), PackedInt32Array(1103, 1102, 1107), PackedInt32Array(1103, 1107, 1104), PackedInt32Array(1104, 1107, 1105), PackedInt32Array(1105, 1107, 1106), PackedInt32Array(1105, 1106, 1101), PackedInt32Array(1105, 1101, 1100), PackedInt32Array(1109, 1108, 1110), PackedInt32Array(1111, 1078, 1112), PackedInt32Array(1114, 1113, 1115), PackedInt32Array(1116, 1081, 1117), PackedInt32Array(1118, 1090, 1119), PackedInt32Array(1120, 1093, 1121), PackedInt32Array(1122, 1096, 1123), PackedInt32Array(1123, 1096, 1124), PackedInt32Array(1076, 1126, 1125), PackedInt32Array(1113, 1127, 1112), PackedInt32Array(1082, 1129, 1128), PackedInt32Array(1091, 1130, 1119), PackedInt32Array(1132, 1131, 1045), PackedInt32Array(1045, 1131, 1048), PackedInt32Array(1048, 1131, 1133), PackedInt32Array(1048, 1133, 1047), PackedInt32Array(1136, 1135, 1134), PackedInt32Array(1139, 1138, 1137), PackedInt32Array(1142, 1141, 1140), PackedInt32Array(1128, 1143, 1142), PackedInt32Array(1131, 1144, 1124), PackedInt32Array(1146, 1145, 1147), PackedInt32Array(1147, 1145, 1150), PackedInt32Array(1150, 1145, 1149), PackedInt32Array(1150, 1149, 1151), PackedInt32Array(1151, 1149, 1148), PackedInt32Array(1151, 1148, 1119), PackedInt32Array(1065, 1152, 1147), PackedInt32Array(1108, 1154, 1153), PackedInt32Array(1079, 1156, 1155), PackedInt32Array(1094, 1157, 1121), PackedInt32Array(1159, 1158, 1160), PackedInt32Array(1160, 1158, 1161), PackedInt32Array(1163, 1162, 1139), PackedInt32Array(1166, 1165, 1164), PackedInt32Array(1168, 1167, 1166), PackedInt32Array(1170, 1169, 1168), PackedInt32Array(1153, 1171, 1170), PackedInt32Array(1125, 1172, 1110), PackedInt32Array(1155, 1173, 1115), PackedInt32Array(1140, 1174, 1117), PackedInt32Array(1078, 1076, 1125), PackedInt32Array(1084, 1082, 1128), PackedInt32Array(1093, 1091, 1119), PackedInt32Array(1166, 1178, 1168), PackedInt32Array(1168, 1178, 1175), PackedInt32Array(1175, 1178, 1177), PackedInt32Array(1175, 1177, 1110), PackedInt32Array(1110, 1177, 1176), PackedInt32Array(1110, 1176, 1112), PackedInt32Array(1112, 1176, 1115), PackedInt32Array(1115, 1113, 1112), PackedInt32Array(1097, 1179, 1102), PackedInt32Array(1124, 1180, 1123), PackedInt32Array(1182, 1181, 1183), PackedInt32Array(1183, 1181, 1134), PackedInt32Array(1137, 1184, 1136), PackedInt32Array(1155, 1081, 1079), PackedInt32Array(1110, 1108, 1153), PackedInt32Array(1121, 1093, 1094), PackedInt32Array(1094, 1093, 1119), PackedInt32Array(1102, 1185, 1107), PackedInt32Array(1107, 1185, 1187), PackedInt32Array(1107, 1187, 1106), PackedInt32Array(1106, 1187, 1186), PackedInt32Array(1106, 1186, 1101), PackedInt32Array(1086, 1084, 1188), PackedInt32Array(1188, 1084, 1128), PackedInt32Array(1078, 1125, 1112), PackedInt32Array(1112, 1125, 1110), PackedInt32Array(1100, 1192, 1105), PackedInt32Array(1105, 1192, 1104), PackedInt32Array(1104, 1192, 1191), PackedInt32Array(1104, 1191, 1190), PackedInt32Array(1104, 1190, 1103), PackedInt32Array(1103, 1190, 1189), PackedInt32Array(1103, 1189, 1099), PackedInt32Array(1099, 1189, 1164), PackedInt32Array(1164, 1189, 1166), PackedInt32Array(1142, 1140, 1117), PackedInt32Array(1168, 1175, 1170), PackedInt32Array(1170, 1175, 1110), PackedInt32Array(1073, 1193, 1163), PackedInt32Array(1117, 1081, 1155), PackedInt32Array(1088, 1086, 1194), PackedInt32Array(1194, 1086, 1188), PackedInt32Array(1194, 1188, 1128), PackedInt32Array(1196, 1195, 1197), PackedInt32Array(1197, 1195, 1161), PackedInt32Array(1137, 1136, 1139), PackedInt32Array(1139, 1136, 1198), PackedInt32Array(1198, 1136, 1199), PackedInt32Array(1199, 1136, 1181), PackedInt32Array(1199, 1181, 1200), PackedInt32Array(1200, 1181, 1201), PackedInt32Array(1201, 1181, 1057), PackedInt32Array(1136, 1134, 1181), PackedInt32Array(1124, 1096, 1094), PackedInt32Array(1075, 1073, 1163), PackedInt32Array(1128, 1202, 1194), PackedInt32Array(1194, 1202, 1088), PackedInt32Array(1088, 1202, 1090), PackedInt32Array(1211, 1267, 1065), PackedInt32Array(1065, 1267, 1071), PackedInt32Array(1071, 1225, 1070), PackedInt32Array(1070, 1263, 1069), PackedInt32Array(1069, 1270, 1068), PackedInt32Array(1068, 1224, 1067), PackedInt32Array(1067, 1284, 1066), PackedInt32Array(1066, 1266, 1057), PackedInt32Array(1057, 1266, 1201), PackedInt32Array(1201, 1287, 1200), PackedInt32Array(1200, 1292, 1199), PackedInt32Array(1199, 1243, 1198), PackedInt32Array(1198, 1251, 1139), PackedInt32Array(1139, 1251, 1203), PackedInt32Array(1203, 1223, 1204), PackedInt32Array(1204, 1274, 1205), PackedInt32Array(1205, 1295, 1206), PackedInt32Array(1206, 1240, 1100), PackedInt32Array(1100, 1238, 1192), PackedInt32Array(1192, 1253, 1191), PackedInt32Array(1191, 1268, 1190), PackedInt32Array(1190, 1248, 1189), PackedInt32Array(1189, 1247, 1166), PackedInt32Array(1166, 1236, 1178), PackedInt32Array(1178, 1265, 1177), PackedInt32Array(1177, 1281, 1176), PackedInt32Array(1176, 1282, 1115), PackedInt32Array(1115, 1282, 1207), PackedInt32Array(1207, 1242, 1208), PackedInt32Array(1208, 1232, 1209), PackedInt32Array(1209, 1260, 1210), PackedInt32Array(1210, 1264, 1211), PackedInt32Array(1211, 1264, 1267), PackedInt32Array(1267, 1264, 1071), PackedInt32Array(1225, 1288, 1070), PackedInt32Array(1071, 1264, 1225), PackedInt32Array(1263, 1271, 1069), PackedInt32Array(1070, 1262, 1263), PackedInt32Array(1270, 1249, 1068), PackedInt32Array(1069, 1271, 1270), PackedInt32Array(1224, 1286, 1067), PackedInt32Array(1068, 1249, 1224), PackedInt32Array(1284, 1266, 1066), PackedInt32Array(1067, 1285, 1284), PackedInt32Array(1266, 1287, 1201), PackedInt32Array(1287, 1292, 1200), PackedInt32Array(1292, 1243, 1199), PackedInt32Array(1243, 1251, 1198), PackedInt32Array(1251, 1256, 1203), PackedInt32Array(1223, 1274, 1204), PackedInt32Array(1203, 1256, 1223), PackedInt32Array(1274, 1295, 1205), PackedInt32Array(1295, 1240, 1206), PackedInt32Array(1240, 1238, 1100), PackedInt32Array(1238, 1291, 1192), PackedInt32Array(1253, 1233, 1191), PackedInt32Array(1192, 1291, 1253), PackedInt32Array(1268, 1248, 1190), PackedInt32Array(1191, 1233, 1268), PackedInt32Array(1248, 1246, 1189), PackedInt32Array(1247, 1236, 1166), PackedInt32Array(1189, 1246, 1247), PackedInt32Array(1236, 1265, 1178), PackedInt32Array(1265, 1250, 1177), PackedInt32Array(1281, 1282, 1176), PackedInt32Array(1177, 1250, 1281), PackedInt32Array(1282, 1242, 1207), PackedInt32Array(1242, 1231, 1208), PackedInt32Array(1232, 1260, 1209), PackedInt32Array(1208, 1231, 1232), PackedInt32Array(1260, 1264, 1210), PackedInt32Array(1288, 1262, 1070), PackedInt32Array(1225, 1260, 1288), PackedInt32Array(1264, 1260, 1225), PackedInt32Array(1263, 1226, 1271), PackedInt32Array(1262, 1280, 1263), PackedInt32Array(1270, 1226, 1249), PackedInt32Array(1271, 1226, 1270), PackedInt32Array(1286, 1285, 1067), PackedInt32Array(1224, 1283, 1286), PackedInt32Array(1249, 1296, 1224), PackedInt32Array(1284, 1287, 1266), PackedInt32Array(1285, 1287, 1284), PackedInt32Array(1287, 1294, 1292), PackedInt32Array(1292, 1293, 1243), PackedInt32Array(1243, 1256, 1251), PackedInt32Array(1223, 1212, 1274), PackedInt32Array(1256, 1289, 1223), PackedInt32Array(1274, 1228, 1295), PackedInt32Array(1295, 1228, 1240), PackedInt32Array(1240, 1239, 1238), PackedInt32Array(1238, 1252, 1291), PackedInt32Array(1253, 1261, 1233), PackedInt32Array(1291, 1261, 1253), PackedInt32Array(1268, 1275, 1248), PackedInt32Array(1233, 1275, 1268), PackedInt32Array(1248, 1214, 1246), PackedInt32Array(1247, 1244, 1236), PackedInt32Array(1246, 1244, 1247), PackedInt32Array(1236, 1297, 1265), PackedInt32Array(1265, 1297, 1250), PackedInt32Array(1281, 1242, 1282), PackedInt32Array(1250, 1278, 1281), PackedInt32Array(1242, 1279, 1231), PackedInt32Array(1232, 1231, 1260), PackedInt32Array(1288, 1231, 1262), PackedInt32Array(1260, 1231, 1288), PackedInt32Array(1263, 1280, 1226), PackedInt32Array(1262, 1279, 1280), PackedInt32Array(1226, 1217, 1249), PackedInt32Array(1286, 1259, 1285), PackedInt32Array(1283, 1259, 1286), PackedInt32Array(1224, 1290, 1283), PackedInt32Array(1296, 1269, 1224), PackedInt32Array(1249, 1217, 1296), PackedInt32Array(1285, 1294, 1287), PackedInt32Array(1294, 1293, 1292), PackedInt32Array(1293, 1257, 1243), PackedInt32Array(1243, 1220, 1256), PackedInt32Array(1212, 1228, 1274), PackedInt32Array(1223, 1222, 1212), PackedInt32Array(1289, 1222, 1223), PackedInt32Array(1256, 1220, 1289), PackedInt32Array(1228, 1239, 1240), PackedInt32Array(1239, 1252, 1238), PackedInt32Array(1252, 1261, 1291), PackedInt32Array(1261, 1255, 1233), PackedInt32Array(1275, 1214, 1248), PackedInt32Array(1233, 1237, 1275), PackedInt32Array(1214, 1245, 1246), PackedInt32Array(1244, 1215, 1236), PackedInt32Array(1246, 1245, 1244), PackedInt32Array(1236, 1215, 1297), PackedInt32Array(1297, 1213, 1250), PackedInt32Array(1281, 1278, 1242), PackedInt32Array(1250, 1213, 1278), PackedInt32Array(1279, 1262, 1231), PackedInt32Array(1242, 1278, 1279), PackedInt32Array(1280, 1213, 1226), PackedInt32Array(1279, 1213, 1280), PackedInt32Array(1226, 1230, 1217), PackedInt32Array(1259, 1294, 1285), PackedInt32Array(1283, 1258, 1259), PackedInt32Array(1290, 1258, 1283), PackedInt32Array(1224, 1269, 1290), PackedInt32Array(1296, 1217, 1269), PackedInt32Array(1294, 1259, 1293), PackedInt32Array(1257, 1220, 1243), PackedInt32Array(1293, 1258, 1257), PackedInt32Array(1212, 1239, 1228), PackedInt32Array(1222, 1218, 1212), PackedInt32Array(1289, 1220, 1222), PackedInt32Array(1239, 1221, 1252), PackedInt32Array(1252, 1221, 1261), PackedInt32Array(1255, 1237, 1233), PackedInt32Array(1261, 1221, 1255), PackedInt32Array(1275, 1237, 1214), PackedInt32Array(1214, 1237, 1245), PackedInt32Array(1244, 1245, 1215), PackedInt32Array(1215, 1273, 1297), PackedInt32Array(1297, 1273, 1213), PackedInt32Array(1213, 1279, 1278), PackedInt32Array(1213, 1273, 1226), PackedInt32Array(1230, 1272, 1217), PackedInt32Array(1226, 1273, 1230), PackedInt32Array(1258, 1293, 1259), PackedInt32Array(1290, 1219, 1258), PackedInt32Array(1269, 1234, 1290), PackedInt32Array(1217, 1272, 1269), PackedInt32Array(1257, 1300, 1220), PackedInt32Array(1258, 1300, 1257), PackedInt32Array(1212, 1221, 1239), PackedInt32Array(1218, 1216, 1212), PackedInt32Array(1222, 1299, 1218), PackedInt32Array(1220, 1300, 1222), PackedInt32Array(1255, 1241, 1237), PackedInt32Array(1221, 1254, 1255), PackedInt32Array(1237, 1227, 1245), PackedInt32Array(1245, 1227, 1215), PackedInt32Array(1215, 1227, 1273), PackedInt32Array(1230, 1276, 1272), PackedInt32Array(1273, 1227, 1230), PackedInt32Array(1219, 1300, 1258), PackedInt32Array(1290, 1234, 1219), PackedInt32Array(1269, 1272, 1234), PackedInt32Array(1212, 1216, 1221), PackedInt32Array(1218, 1277, 1216), PackedInt32Array(1299, 1298, 1218), PackedInt32Array(1222, 1300, 1299), PackedInt32Array(1241, 1227, 1237), PackedInt32Array(1255, 1254, 1241), PackedInt32Array(1221, 1216, 1254), PackedInt32Array(1276, 1277, 1272), PackedInt32Array(1230, 1227, 1276), PackedInt32Array(1219, 1299, 1300), PackedInt32Array(1234, 1235, 1219), PackedInt32Array(1272, 1235, 1234), PackedInt32Array(1277, 1229, 1216), PackedInt32Array(1218, 1235, 1277), PackedInt32Array(1298, 1235, 1218), PackedInt32Array(1299, 1219, 1298), PackedInt32Array(1241, 1216, 1227), PackedInt32Array(1254, 1216, 1241), PackedInt32Array(1277, 1235, 1272), PackedInt32Array(1276, 1229, 1277), PackedInt32Array(1227, 1229, 1276), PackedInt32Array(1235, 1298, 1219), PackedInt32Array(1229, 1227, 1216), PackedInt32Array(1110, 1153, 1170), PackedInt32Array(1119, 1090, 1301), PackedInt32Array(1301, 1090, 1302), PackedInt32Array(1302, 1090, 1202), PackedInt32Array(1302, 1202, 1303), PackedInt32Array(1303, 1202, 1128), PackedInt32Array(1303, 1128, 1142), PackedInt32Array(1303, 1142, 1117), PackedInt32Array(1195, 1304, 1075), PackedInt32Array(1124, 1094, 1305), PackedInt32Array(1305, 1094, 1306), PackedInt32Array(1306, 1094, 1119), PackedInt32Array(1147, 1211, 1065), PackedInt32Array(1211, 1314, 1210), PackedInt32Array(1210, 1314, 1209), PackedInt32Array(1209, 1309, 1208), PackedInt32Array(1208, 1313, 1207), PackedInt32Array(1207, 1155, 1115), PackedInt32Array(1155, 1207, 1117), PackedInt32Array(1117, 1312, 1303), PackedInt32Array(1303, 1307, 1302), PackedInt32Array(1302, 1308, 1301), PackedInt32Array(1301, 1308, 1119), PackedInt32Array(1119, 1308, 1151), PackedInt32Array(1151, 1311, 1150), PackedInt32Array(1150, 1314, 1147), PackedInt32Array(1147, 1314, 1211), PackedInt32Array(1314, 1310, 1209), PackedInt32Array(1309, 1313, 1208), PackedInt32Array(1209, 1310, 1309), PackedInt32Array(1313, 1312, 1207), PackedInt32Array(1207, 1312, 1117), PackedInt32Array(1312, 1315, 1303), PackedInt32Array(1307, 1311, 1302), PackedInt32Array(1303, 1315, 1307), PackedInt32Array(1302, 1311, 1308), PackedInt32Array(1308, 1311, 1151), PackedInt32Array(1311, 1310, 1150), PackedInt32Array(1150, 1310, 1314), PackedInt32Array(1309, 1310, 1313), PackedInt32Array(1313, 1316, 1312), PackedInt32Array(1312, 1316, 1315), PackedInt32Array(1307, 1310, 1311), PackedInt32Array(1315, 1316, 1307), PackedInt32Array(1310, 1307, 1313), PackedInt32Array(1313, 1307, 1316), PackedInt32Array(1164, 1317, 1099), PackedInt32Array(1148, 1321, 1119), PackedInt32Array(1119, 1321, 1306), PackedInt32Array(1306, 1319, 1305), PackedInt32Array(1305, 1320, 1124), PackedInt32Array(1124, 1133, 1131), PackedInt32Array(1133, 1318, 1047), PackedInt32Array(1047, 1318, 1145), PackedInt32Array(1145, 1318, 1149), PackedInt32Array(1149, 1319, 1148), PackedInt32Array(1148, 1319, 1321), PackedInt32Array(1321, 1319, 1306), PackedInt32Array(1319, 1320, 1305), PackedInt32Array(1320, 1133, 1124), PackedInt32Array(1133, 1320, 1318), PackedInt32Array(1318, 1320, 1149), PackedInt32Array(1149, 1320, 1319), PackedInt32Array(1160, 1161, 1195), PackedInt32Array(1160, 1206, 1100), PackedInt32Array(1206, 1323, 1205), PackedInt32Array(1205, 1323, 1204), PackedInt32Array(1204, 1322, 1203), PackedInt32Array(1203, 1163, 1139), PackedInt32Array(1163, 1203, 1075), PackedInt32Array(1075, 1322, 1195), PackedInt32Array(1195, 1324, 1160), PackedInt32Array(1160, 1324, 1206), PackedInt32Array(1206, 1324, 1323), PackedInt32Array(1323, 1195, 1204), PackedInt32Array(1322, 1075, 1203), PackedInt32Array(1204, 1195, 1322), PackedInt32Array(1195, 1323, 1324)]
agent_height = 2.0

[sub_resource type="Gradient" id="Gradient_vr1m7"]
offsets = PackedFloat32Array(0.2, 1)
colors = PackedColorArray(1, 1, 1, 1, 0, 0, 0, 1)

[sub_resource type="FastNoiseLite" id="FastNoiseLite_d8lcj"]
noise_type = 2
frequency = 0.03
cellular_jitter = 3.0
cellular_return_type = 0
domain_warp_enabled = true
domain_warp_type = 1
domain_warp_amplitude = 50.0
domain_warp_fractal_type = 2
domain_warp_fractal_lacunarity = 1.5
domain_warp_fractal_gain = 1.0

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_bov7h"]
seamless = true
color_ramp = SubResource("Gradient_vr1m7")
noise = SubResource("FastNoiseLite_d8lcj")

[sub_resource type="Shader" id="Shader_amoo3"]
code = "shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;

/* This shader is generated based upon the debug views you have selected.
 * The terrain function depends on this shader. So don't change:
 * - vertex positioning in vertex()
 * - terrain normal calculation in fragment()
 * - the last function being fragment() as the editor injects code before the closing }
 *
 * Most will only want to customize the material calculation and PBR application in fragment()
 *
 * Uniforms that begin with _ are private and will not display in the inspector. However,
 * you can set them via code. You are welcome to create more of your own hidden uniforms.
 *
 * This system only supports albedo, height, normal, roughness. Most textures don't need the other
 * PBR channels. Height can be used as an approximation for AO. For the rare textures do need
 * additional channels, you can add maps for that one texture. e.g. an emissive map for lava.
 *
 */

// Private uniforms

uniform float _region_size = 1024.0;
uniform float _region_texel_size = 0.0009765625; // = 1/1024
uniform float _mesh_vertex_spacing = 1.0;
uniform float _mesh_vertex_density = 1.0; // = 1/_mesh_vertex_spacing
uniform int _region_map_size = 16;
uniform int _region_map[256];
uniform vec2 _region_offsets[256];
uniform sampler2DArray _height_maps : repeat_disable;
uniform usampler2DArray _control_maps : repeat_disable;
uniform sampler2DArray _color_maps : source_color, filter_linear_mipmap_anisotropic, repeat_disable;
uniform sampler2DArray _texture_array_albedo : source_color, filter_linear_mipmap_anisotropic, repeat_enable;
uniform sampler2DArray _texture_array_normal : hint_normal, filter_linear_mipmap_anisotropic, repeat_enable;
uniform sampler2D noise_texture : source_color, filter_linear_mipmap_anisotropic, repeat_enable;

uniform float _texture_uv_scale_array[32];
uniform float _texture_detile_array[32];
uniform vec4 _texture_color_array[32];
uniform uint _background_mode = 1u;  // NONE = 0, FLAT = 1, NOISE = 2
uniform uint _mouse_layer = 0x80000000u; // Layer 32

// Public uniforms
uniform float vertex_normals_distance : hint_range(0, 1024) = 128.0;
uniform bool height_blending = true;
uniform float blend_sharpness : hint_range(0, 1) = 0.87;
uniform float auto_slope : hint_range(0, 10) = 1.0;
uniform float auto_height_reduction : hint_range(0, 1) = 0.1;
uniform int auto_base_texture : hint_range(0, 31) = 0;
uniform int auto_overlay_texture : hint_range(0, 31) = 1;

uniform int dual_scale_texture : hint_range(0,31) = 0;
uniform float dual_scale_reduction : hint_range(0.001,1) = 0.3;
uniform float tri_scale_reduction : hint_range(0.001,1) = 0.3;
uniform float dual_scale_far : hint_range(0,1000) = 170.0;
uniform float dual_scale_near : hint_range(0,1000) = 100.0;

uniform vec3 macro_variation1 : source_color = vec3(1.);
uniform vec3 macro_variation2 : source_color = vec3(1.);
// Generic noise at 3 scales, which can be used for anything
uniform float noise1_scale : hint_range(0.001, 1.) = 0.04;	// Used for macro variation 1. Scaled up 10x
uniform float noise1_angle : hint_range(0, 6.283) = 0.;
uniform vec2 noise1_offset = vec2(0.5);
uniform float noise2_scale : hint_range(0.001, 1.) = 0.076;	// Used for macro variation 2. Scaled up 10x
uniform float noise3_scale : hint_range(0.001, 1.) = 0.225;  // Used for texture blending edge.

// Varyings & Types

struct Material {
	vec4 alb_ht;
	vec4 nrm_rg;
	int base;
	int over;
	float blend;
};

varying flat vec3 v_vertex;	// World coordinate vertex location
varying flat vec3 v_camera_pos;
varying float v_vertex_xz_dist;
varying flat ivec3 v_region;
varying flat vec2 v_uv_offset;
varying flat vec2 v_uv2_offset;
varying vec3 v_normal;
varying float v_region_border_mask;

////////////////////////
// Vertex
////////////////////////

// Takes in UV world space coordinates, returns ivec3 with:
// XY: (0 to _region_size) coordinates within a region
// Z: layer index used for texturearrays, -1 if not in a region
ivec3 get_region_uv(vec2 uv) {
	uv *= _region_texel_size;
	ivec2 pos = ivec2(floor(uv)) + (_region_map_size / 2);
	int bounds = int(pos.x >= 0 && pos.x < _region_map_size && pos.y >= 0 && pos.y < _region_map_size);
	int layer_index = _region_map[ pos.y * _region_map_size + pos.x ] * bounds - 1;
	return ivec3(ivec2((uv - _region_offsets[layer_index]) * _region_size), layer_index);
}

// Takes in UV2 region space coordinates, returns vec3 with:
// XY: (0 to 1) coordinates within a region
// Z: layer index used for texturearrays, -1 if not in a region
vec3 get_region_uv2(vec2 uv) {
	// Vertex function added half a texel to UV2, to center the UV's.  vertex(), fragment() and get_height()
	// call this with reclaimed versions of UV2, so to keep the last row/column within the correct
	// window, take back the half pixel before the floor().
	ivec2 pos = ivec2(floor(uv - vec2(_region_texel_size * 0.5))) + (_region_map_size / 2);
	int bounds = int(pos.x >= 0 && pos.x < _region_map_size && pos.y >= 0 && pos.y < _region_map_size);
	int layer_index = _region_map[ pos.y * _region_map_size + pos.x ] * bounds - 1;
	// The return value is still texel-centered.
	return vec3(uv - _region_offsets[layer_index], float(layer_index));
}

// World Noise

uniform sampler2D _region_blend_map : hint_default_black, filter_linear, repeat_disable;
uniform int world_noise_max_octaves : hint_range(0, 15) = 4;
uniform int world_noise_min_octaves : hint_range(0, 15) = 2;
uniform float world_noise_lod_distance : hint_range(0, 40000, 1) = 7500.;
uniform float world_noise_scale : hint_range(0.25, 20, 0.01) = 5.0;
uniform float world_noise_height : hint_range(0, 1000, 0.1) = 64.0;
uniform vec3 world_noise_offset = vec3(0.0);
uniform float world_noise_blend_near : hint_range(0, .95, 0.01) = 0.5;
uniform float world_noise_blend_far : hint_range(.05, 1, 0.01) = 1.0;

float hashf(float f) {
	return fract(sin(f) * 1e4);
}

float hashv2(vec2 v) {
	return fract(1e4 * sin(17.0 * v.x + v.y * 0.1) * (0.1 + abs(sin(v.y * 13.0 + v.x))));
}

// https://iquilezles.org/articles/morenoise/
vec3 noise2D(vec2 x) {
    vec2 f = fract(x);
    // Quintic Hermine Curve.  Similar to SmoothStep()
    vec2 u = f*f*f*(f*(f*6.0-15.0)+10.0);
    vec2 du = 30.0*f*f*(f*(f-2.0)+1.0);

    vec2 p = floor(x);

	// Four corners in 2D of a tile
	float a = hashv2( p+vec2(0,0) );
    float b = hashv2( p+vec2(1,0) );
    float c = hashv2( p+vec2(0,1) );
    float d = hashv2( p+vec2(1,1) );

    // Mix 4 corner percentages
    float k0 =   a;
    float k1 =   b - a;
    float k2 =   c - a;
    float k3 =   a - b - c + d;
    return vec3( k0 + k1 * u.x + k2 * u.y + k3 * u.x * u.y,
                du * ( vec2(k1, k2) + k3 * u.yx) );
}

float world_noise(vec2 p) {
    float a = 0.0;
    float b = 1.0;
    vec2  d = vec2(0.0);

    int octaves = int( clamp(
	float(world_noise_max_octaves) - floor(v_vertex_xz_dist/(world_noise_lod_distance)),
    float(world_noise_min_octaves), float(world_noise_max_octaves)) );

    for( int i=0; i < octaves; i++ ) {
        vec3 n = noise2D(p);
        d += n.yz;
        a += b * n.x / (1.0 + dot(d,d));
        b *= 0.5;
        p = mat2( vec2(0.8, -0.6), vec2(0.6, 0.8) ) * p * 2.0;
    }
    return a;
}

// World Noise end

// 1 lookup
float get_height(vec2 uv) {
	highp float height = 0.0;
	vec3 region = get_region_uv2(uv);
	if (region.z >= 0.) {
		height = texture(_height_maps, region).r;
	}
	// World Noise
   	if (_background_mode == 2u) {
	    float weight = texture(_region_blend_map, (uv / float(_region_map_size)) + 0.5).r;
	    float rmap_half_size = float(_region_map_size) * .5;
	    if (abs(uv.x) > rmap_half_size + .5 || abs(uv.y) > rmap_half_size + .5) {
		    weight = 0.;
	    } else {
		    if (abs(uv.x) > rmap_half_size - .5) {
			    weight = mix(weight, 0., abs(uv.x) - (rmap_half_size-.5));
		    }
		    if (abs(uv.y) > rmap_half_size - .5) {
			    weight = mix(weight, 0., abs(uv.y) - (rmap_half_size-.5));
		    }
	    }
	    height = mix(height, world_noise((uv + world_noise_offset.xz) * world_noise_scale * .1) *
            world_noise_height * 10. + world_noise_offset.y * 100.,
		    clamp(smoothstep(world_noise_blend_near, world_noise_blend_far, 1.0 - weight), 0.0, 1.0));
    }
 	return height;
}

void vertex() {
	// Get camera pos in world vertex coords
	v_camera_pos = INV_VIEW_MATRIX[3].xyz;

	// Get vertex of flat plane in world coordinates and set world UV
	v_vertex = (MODEL_MATRIX * vec4(VERTEX, 1.0)).xyz;

	// Camera distance to vertex on flat plane
	v_vertex_xz_dist = length(v_vertex.xz - v_camera_pos.xz);

	// UV coordinates in world space. Values are 0 to _region_size within regions
	UV = round(v_vertex.xz * _mesh_vertex_density);

	// UV coordinates in region space + texel offset. Values are 0 to 1 within regions
	UV2 = (UV + vec2(0.5)) * _region_texel_size;

	// Discard vertices for Holes. 1 lookup
	v_region = get_region_uv(UV);
	uint control = texelFetch(_control_maps, v_region, 0).r;
	bool hole = bool(control >>2u & 0x1u);

	// Show holes to all cameras except mouse camera (on exactly 1 layer)
	if ( !(CAMERA_VISIBLE_LAYERS == _mouse_layer) &&
			(hole || (_background_mode == 0u && v_region.z < 0)) ) {
		VERTEX.x = 0. / 0.;
	} else {
		// Set final vertex height & calculate vertex normals. 3 lookups.
		VERTEX.y = get_height(UV2);
		v_vertex.y = VERTEX.y;
		v_normal = vec3(
			v_vertex.y - get_height(UV2 + vec2(_region_texel_size, 0)),
			_mesh_vertex_spacing,
			v_vertex.y - get_height(UV2 + vec2(0, _region_texel_size))
		);
		// Due to a bug caused by the GPUs linear interpolation across edges of region maps,
		// mask region edges and use vertex normals only across region boundaries.
		v_region_border_mask = mod(UV.x + 2.5, _region_size) - fract(UV.x) < 5.0 || mod(UV.y + 2.5, _region_size) - fract(UV.y) < 5.0 ? 1. : 0.;
	}

	// Transform UVs to local to avoid poor precision during varying interpolation.
	v_uv_offset = MODEL_MATRIX[3].xz * _mesh_vertex_density;
	UV -= v_uv_offset;
	v_uv2_offset = v_uv_offset * _region_texel_size;
	UV2 -= v_uv2_offset;
}

////////////////////////
// Fragment
////////////////////////

// 0 - 3 lookups
vec3 get_normal(vec2 uv, out vec3 tangent, out vec3 binormal) {
	float u, v, height;
	vec3 normal;
	// Use vertex normals within radius of vertex_normals_distance, and along region borders.
	if (v_region_border_mask > 0.5 || v_vertex_xz_dist < vertex_normals_distance) {
		normal = normalize(v_normal);
	} else {
		height = get_height(uv);
		u = height - get_height(uv + vec2(_region_texel_size, 0));
		v = height - get_height(uv + vec2(0, _region_texel_size));
		normal = normalize(vec3(u, _mesh_vertex_spacing, v));
	}
	tangent = cross(normal, vec3(0, 0, 1));
	binormal = cross(normal, tangent);
	return normal;
}

vec3 unpack_normal(vec4 rgba) {
	vec3 n = rgba.xzy * 2.0 - vec3(1.0);
	n.z *= -1.0;
	return n;
}

vec4 pack_normal(vec3 n, float a) {
	n.z *= -1.0;
	return vec4((n.xzy + vec3(1.0)) * 0.5, a);
}

float random(in vec2 xy) {
	return fract(sin(dot(xy, vec2(12.9898, 78.233))) * 43758.5453);
}

vec2 rotate(vec2 v, float cosa, float sina) {
	return vec2(cosa * v.x - sina * v.y, sina * v.x + cosa * v.y);
}

// Moves a point around a pivot point.
vec2 rotate_around(vec2 point, vec2 pivot, float angle){
	float x = pivot.x + (point.x - pivot.x) * cos(angle) - (point.y - pivot.y) * sin(angle);
	float y = pivot.y + (point.x - pivot.x) * sin(angle) + (point.y - pivot.y) * cos(angle);
	return vec2(x, y);
}

vec4 height_blend(vec4 a_value, float a_height, vec4 b_value, float b_height, float blend) {
	if(height_blending) {
		float ma = max(a_height + (1.0 - blend), b_height + blend) - (1.001 - blend_sharpness);
	    float b1 = max(a_height + (1.0 - blend) - ma, 0.0);
	    float b2 = max(b_height + blend - ma, 0.0);
	    return (a_value * b1 + b_value * b2) / (b1 + b2);
	} else {
		float contrast = 1.0 - blend_sharpness;
		float factor = (blend - contrast) / contrast;
		return mix(a_value, b_value, clamp(factor, 0.0, 1.0));
	}
}

vec2 detiling(vec2 uv, vec2 uv_center, int mat_id, inout float normal_rotation){
	if (_texture_detile_array[mat_id] >= 0.001){
		uv_center = floor(uv_center) + 0.5;
		float detile = (random(uv_center) - 0.5) * 2.0 * TAU * _texture_detile_array[mat_id]; // -180deg to 180deg
		uv = rotate_around(uv, uv_center, detile);
		// Accumulate total rotation for normal rotation
		normal_rotation += detile;
	}
	return uv;
}

vec2 rotate_normal(vec2 normal, float angle) {
	angle += PI * 0.5;
	float new_y = dot(vec2(cos(angle), sin(angle)), normal);
	angle -= PI * 0.5;
	float new_x = dot(vec2(cos(angle) ,sin(angle)) ,normal);
	return vec2(new_x, new_y);
}

// 2-4 lookups
void get_material(vec2 base_uv, uint control, ivec3 iuv_center, vec3 normal, out Material out_mat) {
	out_mat = Material(vec4(0.), vec4(0.), 0, 0, 0.0);
	vec2 uv_center = vec2(iuv_center.xy);
	int region = iuv_center.z;

	// Enable Autoshader if outside regions or painted in regions, otherwise manual painted
	bool auto_shader = region < 0 || bool(control & 0x1u);
	out_mat.base = int(auto_shader) * auto_base_texture + int(!auto_shader) * int(control >>27u & 0x1Fu);
	out_mat.over = int(auto_shader) * auto_overlay_texture + int(!auto_shader) * int(control >> 22u & 0x1Fu);
	out_mat.blend = float(auto_shader) * clamp(
			dot(vec3(0., 1., 0.), normal * auto_slope * 2. - (auto_slope * 2. - 1.))
			- auto_height_reduction * .01 * v_vertex.y // Reduce as vertices get higher
			, 0., 1.) +
			 float(!auto_shader) * float(control >>14u & 0xFFu) * 0.003921568627450; // 1./255.0

	// Control map scale & rotation, apply to both base and
	// uv_center. Translate uv center to the current region.
	uv_center += _region_offsets[region] * _region_size;
	// Define base scale from control map value as array index. 0.5 as baseline.
	float[8] scale_array = { 0.5, 0.4, 0.3, 0.2, 0.1, 0.8, 0.7, 0.6};
	float control_scale = scale_array[(control >>7u & 0x7u)];
	base_uv *= control_scale;
	uv_center *=  control_scale;
	// calculate baseline derivatives
	vec2 ddx = dFdxCoarse(base_uv);
	vec2 ddy = dFdyCoarse(base_uv);
	// Apply global uv rotation from control map.
	float uv_rotation = float(control >>10u & 0xFu) / 16. * TAU;
	base_uv = rotate_around(base_uv, vec2(0), uv_rotation);
	uv_center = rotate_around(uv_center, vec2(0), uv_rotation);

	vec2 matUV = base_uv;
	vec4 albedo_ht = vec4(0.);
	vec4 normal_rg = vec4(0.5f, 0.5f, 1.0f, 1.0f);
	vec4 albedo_far = vec4(0.);
	vec4 normal_far = vec4(0.5f, 0.5f, 1.0f, 1.0f);
	float mat_scale = _texture_uv_scale_array[out_mat.base];
	float normal_angle = uv_rotation;
	vec2 ddx1 = ddx;
	vec2 ddy1 = ddy;

	// If dual scaling, apply to base texture
	if(region < 0) {
		mat_scale *= tri_scale_reduction;
	}
	//each time we change scale, recalculate antitiling from baseline to maintain continuity.
	matUV = detiling(base_uv * mat_scale, uv_center * mat_scale, out_mat.base, normal_angle);
	ddx1 *= mat_scale;
	ddy1 *= mat_scale;
	albedo_ht = textureGrad(_texture_array_albedo, vec3(matUV, float(out_mat.base)), ddx1, ddy1);
	normal_rg = textureGrad(_texture_array_normal, vec3(matUV, float(out_mat.base)), ddx1, ddy1);

	// Unpack & rotate base normal for blending
	normal_rg.xz = unpack_normal(normal_rg).xz;
	normal_rg.xz = rotate_normal(normal_rg.xz, normal_angle);

	if(out_mat.base == dual_scale_texture || out_mat.over == dual_scale_texture) {
		mat_scale *= dual_scale_reduction;
		ddx1 *= dual_scale_reduction;
		ddy1 *= dual_scale_reduction;
		float dual_scale_normal = uv_rotation; //do not add near & far rotations
		// Do not apply detiling if tri-scale reduction occurs.
		matUV = region < 0 ? base_uv * mat_scale : detiling(base_uv * mat_scale, uv_center * mat_scale, dual_scale_texture, dual_scale_normal);
		albedo_far = textureGrad(_texture_array_albedo, vec3(matUV, float(dual_scale_texture)), ddx1, ddy1);
		normal_far = textureGrad(_texture_array_normal, vec3(matUV, float(dual_scale_texture)), ddx1, ddy1);

		// Unpack & rotate dual scale normal for blending
		normal_far.xz = unpack_normal(normal_far).xz;
		normal_far.xz = rotate_normal(normal_far.xz, dual_scale_normal);
	}

	float far_factor = clamp(smoothstep(dual_scale_near, dual_scale_far, length(v_vertex - v_camera_pos)), 0.0, 1.0);
	if(out_mat.base == dual_scale_texture) {
		albedo_ht = mix(albedo_ht, albedo_far, far_factor);
		normal_rg = mix(normal_rg, normal_far, far_factor);
	}

	// Apply color to base
	albedo_ht.rgb *= _texture_color_array[out_mat.base].rgb;

	// Setup overlay texture to blend
	float mat_scale2 = _texture_uv_scale_array[out_mat.over];
	float normal_angle2 = uv_rotation;
	vec2 matUV2 = detiling(base_uv * mat_scale2, uv_center * mat_scale2, out_mat.over, normal_angle2);
	vec2 ddx2 = ddx * mat_scale2;
	vec2 ddy2 = ddy * mat_scale2;
	vec4 albedo_ht2 = textureGrad(_texture_array_albedo, vec3(matUV2, float(out_mat.over)), ddx2, ddy2);
	vec4 normal_rg2 = textureGrad(_texture_array_normal, vec3(matUV2, float(out_mat.over)), ddx2, ddy2);

	// Though it would seem having the above lookups in this block, or removing the branch would
	// be more optimal, the first introduces artifacts #276, and the second is noticably slower.
	// It seems the branching off dual scaling and the color array lookup is more optimal.
	if (out_mat.blend > 0.f) {
		// Unpack & rotate overlay normal for blending
		normal_rg2.xz = unpack_normal(normal_rg2).xz;
		normal_rg2.xz = rotate_normal(normal_rg2.xz, normal_angle2);

		// If dual scaling, apply to overlay texture
		if(out_mat.over == dual_scale_texture) {
			albedo_ht2 = mix(albedo_ht2, albedo_far, far_factor);
			normal_rg2 = mix(normal_rg2, normal_far, far_factor);
		}

		// Apply color to overlay
		albedo_ht2.rgb *= _texture_color_array[out_mat.over].rgb;

		// Blend overlay and base
		albedo_ht = height_blend(albedo_ht, albedo_ht.a, albedo_ht2, albedo_ht2.a, out_mat.blend);
		normal_rg = height_blend(normal_rg, albedo_ht.a, normal_rg2, albedo_ht2.a, out_mat.blend);
	}

	// Repack normals and return material
	normal_rg = pack_normal(normal_rg.xyz, normal_rg.a);
	out_mat.alb_ht = albedo_ht;
	out_mat.nrm_rg = normal_rg;
	return;
}

float blend_weights(float weight, float detail) {
	weight = smoothstep(0.0, 1.0, weight);
	weight = sqrt(weight * 0.5);
	float result = max(0.1 * weight, 10.0 * (weight + detail) + 1.0f - (detail + 10.0));
	return result;
}

void fragment() {
	// Recover UVs
	vec2 uv = UV + v_uv_offset;
	vec2 uv2 = UV2 + v_uv2_offset;

	// Calculate Terrain Normals. 4 lookups
	vec3 w_tangent, w_binormal;
	vec3 w_normal = get_normal(uv2, w_tangent, w_binormal);
	NORMAL = mat3(VIEW_MATRIX) * w_normal;
	TANGENT = mat3(VIEW_MATRIX) * w_tangent;
	BINORMAL = mat3(VIEW_MATRIX) * w_binormal;

	// Idenfity 4 vertices surrounding this pixel
	vec2 texel_pos = uv;
	highp vec2 texel_pos_floor = floor(uv);

	// Create a cross hatch grid of alternating 0/1 horizontal and vertical stripes 1 unit wide in XY
	vec4 mirror = vec4(fract(texel_pos_floor * 0.5) * 2.0, 1.0, 1.0);
	// And the opposite grid in ZW
	mirror.zw = vec2(1.0) - mirror.xy;

	// Get the region and control map ID for the vertices
	ivec3 indexUV[4] = {
		get_region_uv(texel_pos_floor + mirror.xy),
		get_region_uv(texel_pos_floor + mirror.xw),
		get_region_uv(texel_pos_floor + mirror.zy),
		get_region_uv(texel_pos_floor + mirror.zw)
	};

	// Lookup adjacent vertices. 4 lookups
	uint control[4] = {
		texelFetch(_control_maps, indexUV[0], 0).r,
		texelFetch(_control_maps, indexUV[1], 0).r,
		texelFetch(_control_maps, indexUV[2], 0).r,
		texelFetch(_control_maps, indexUV[3], 0).r
	};

	// Get the textures for each vertex. 8-16 lookups (2-4 ea)
	Material mat[4];
	get_material(uv, control[0], indexUV[0], w_normal, mat[0]);
	get_material(uv, control[1], indexUV[1], w_normal, mat[1]);
	get_material(uv, control[2], indexUV[2], w_normal, mat[2]);
	get_material(uv, control[3], indexUV[3], w_normal, mat[3]);

	// Calculate weight for the pixel position between the vertices
	// Bilinear interpolation of difference of uv and floor(uv)
	vec2 weights1 = clamp(texel_pos - texel_pos_floor, 0, 1);
	weights1 = mix(weights1, vec2(1.0) - weights1, mirror.xy);
	vec2 weights0 = vec2(1.0) - weights1;
	// Adjust final weights by texture's height/depth + noise. 1 lookup
	float noise3 = texture(noise_texture, uv*noise3_scale).r;
	vec4 weights;
	weights.x = blend_weights(weights0.x * weights0.y, clamp(mat[0].alb_ht.a + noise3, 0., 1.));
	weights.y = blend_weights(weights0.x * weights1.y, clamp(mat[1].alb_ht.a + noise3, 0., 1.));
	weights.z = blend_weights(weights1.x * weights0.y, clamp(mat[2].alb_ht.a + noise3, 0., 1.));
	weights.w = blend_weights(weights1.x * weights1.y, clamp(mat[3].alb_ht.a + noise3, 0., 1.));
	float weight_sum = weights.x + weights.y + weights.z + weights.w;
	float weight_inv = 1.0 / weight_sum;

	// Weighted average of albedo & height
	vec4 albedo_height = weight_inv * (
		mat[0].alb_ht * weights.x +
		mat[1].alb_ht * weights.y +
		mat[2].alb_ht * weights.z +
		mat[3].alb_ht * weights.w );

	// Weighted average of normal & rough
	vec4 normal_rough = weight_inv * (
		mat[0].nrm_rg * weights.x +
		mat[1].nrm_rg * weights.y +
		mat[2].nrm_rg * weights.z +
		mat[3].nrm_rg * weights.w );

	// Determine if we're in a region or not (region_uv.z>0)
	vec3 region_uv = get_region_uv2(uv2);

	// Colormap. 1 lookup
	vec4 color_map = vec4(1., 1., 1., .5);
	if (region_uv.z >= 0.) {
		float lod = textureQueryLod(_color_maps, uv2.xy).y;
		color_map = textureLod(_color_maps, region_uv, lod);
	}

	// Macro variation. 2 Lookups
	float noise1 = texture(noise_texture, rotate(uv*noise1_scale * .1, cos(noise1_angle), sin(noise1_angle)) + noise1_offset).r;
	float noise2 = texture(noise_texture, uv*noise2_scale * .1).r;
	vec3 macrov = mix(macro_variation1, vec3(1.), clamp(noise1 + v_vertex_xz_dist * .0002, 0., 1.));
	macrov *= mix(macro_variation2, vec3(1.), clamp(noise2 + v_vertex_xz_dist * .0002, 0., 1.));

	// Wetness/roughness modifier, converting 0-1 range to -1 to 1 range
	float roughness = fma(color_map.a - 0.5, 2.0, normal_rough.a);

	// Apply PBR
	ALBEDO = albedo_height.rgb * color_map.rgb * macrov;
	ROUGHNESS = roughness;
	SPECULAR = 1. - normal_rough.a;
	NORMAL_MAP = normal_rough.rgb;
	NORMAL_MAP_DEPTH = 1.0;

}

"

[sub_resource type="Terrain3DMaterial" id="Terrain3DMaterial_yp0ed"]
_shader_parameters = {
"_mouse_layer": 2147483648,
"auto_base_texture": 0,
"auto_height_reduction": 0.1,
"auto_overlay_texture": 1,
"auto_slope": 1.0,
"blend_sharpness": 0.87,
"dual_scale_far": 170.0,
"dual_scale_near": 100.0,
"dual_scale_reduction": 0.3,
"dual_scale_texture": 0,
"height_blending": true,
"macro_variation1": Color(0.878431, 0.862745, 0.901961, 1),
"macro_variation2": Color(0.898039, 0.898039, 0.803922, 1),
"noise1_angle": 0.1,
"noise1_offset": Vector2(0.5, 0.5),
"noise1_scale": 0.04,
"noise2_scale": 0.076,
"noise3_scale": 0.225,
"noise_texture": SubResource("NoiseTexture2D_bov7h"),
"tri_scale_reduction": 0.3,
"vertex_normals_distance": 128.0,
"world_noise_blend_far": 1.0,
"world_noise_blend_near": 0.7,
"world_noise_height": 34.0,
"world_noise_lod_distance": 7500.0,
"world_noise_max_octaves": 4,
"world_noise_min_octaves": 2,
"world_noise_offset": Vector3(1.485, -1.01, 1.9),
"world_noise_scale": 9.85
}
world_background = 2
auto_shader = true
dual_scaling = true
shader_override = SubResource("Shader_amoo3")

[node name="Main" type="Node"]

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource("Environment_3d6es")

[node name="Ground" type="StaticBody3D" parent="."]
collision_layer = 4294967295

[node name="CollisionShape" type="CollisionShape3D" parent="Ground"]
shape = SubResource("WorldBoundaryShape3D_fc7yi")

[node name="MeshInstance3D" type="MeshInstance3D" parent="Ground"]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0)
mesh = SubResource("BoxMesh_qfr0p")

[node name="Lighting" type="DirectionalLight3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 0.5, 0.866025, 0, -0.866025, 0.5, 0, 7, -2)
shadow_enabled = true
shadow_transmittance_bias = 1.0

[node name="Player" parent="." instance=ExtResource("1_y6aoc")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 565, 196, 551)

[node name="NavMesh" type="NavigationRegion3D" parent="."]
navigation_mesh = SubResource("NavigationMesh_3mdr1")

[node name="Terrain3D" type="Terrain3D" parent="NavMesh"]
storage = ExtResource("3_g5m1t")
material = SubResource("Terrain3DMaterial_yp0ed")
assets = ExtResource("5_l6jr1")
render_cull_margin = 1000.0
collision_layer = 4294967295
collision_mask = 3
mesh_size = 64

[node name="TentSpawner" type="Node3D" parent="."]

[node name="Tent" parent="TentSpawner" instance=ExtResource("7_20ygi")]
transform = Transform3D(0.5, 0, 0, 0, 0.5, 0, 0, 0, 0.5, 572, 195, 551)

[node name="Spawner" parent="TentSpawner" instance=ExtResource("8_g6n7e")]
transform = Transform3D(2, 0, 0, 0, 1, 0, 0, 0, 1, 571.5, 197, 551)

[node name="EnemySpawner" type="Node3D" parent="." node_paths=PackedStringArray("navmesh")]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 373, 116, 365)
script = ExtResource("8_loy3m")
enemy_scene = ExtResource("6_x66dh")
navmesh = NodePath("../NavMesh")

[node name="Timer" type="Timer" parent="EnemySpawner"]
autostart = true

[connection signal="timeout" from="EnemySpawner/Timer" to="EnemySpawner" method="_timeout"]
